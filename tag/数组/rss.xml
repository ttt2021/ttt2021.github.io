<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>星语の博客 • Posts by &#34;数组&#34; tag</title>
        <link>https://ttt2021.github.io</link>
        <description></description>
        <language>zh-Hans</language>
        <pubDate>Sat, 15 May 2021 20:24:52 +0800</pubDate>
        <lastBuildDate>Sat, 15 May 2021 20:24:52 +0800</lastBuildDate>
        <category>javascript</category>
        <category>数组</category>
        <category>排序</category>
        <item>
            <guid isPermalink="true">https://ttt2021.github.io/posts/c1d0a512/</guid>
            <title>数据结构与算法之数组</title>
            <link>https://ttt2021.github.io/posts/c1d0a512/</link>
            <category>数组</category>
            <pubDate>Sat, 15 May 2021 20:24:52 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;什么是数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是数组&#34;&gt;#&lt;/a&gt; 什么是数组&lt;/h2&gt;
&lt;p&gt;  (1) 数组是一种线性表数据结构。&lt;br&gt;
  线性表：数据排成像一条线一样的结构 数据最多只有前和后两个方向，如数组、链表、队列、栈采用的就是线性表。&lt;br&gt;
  线性表：数非线性表：数据之间并不是简单的前后关系，如二叉树、堆、图采用的就是非线性表。&lt;br&gt;
  (2) 用一组连续的内存空间来存储一组具有相同类型的数据。&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&#34;为什么在大多数编程语言中数组要从0开始编码而不是从1开始呢&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#为什么在大多数编程语言中数组要从0开始编码而不是从1开始呢&#34;&gt;#&lt;/a&gt; 为什么在大多数编程语言中，数组要从 0 开始编码，而不是从 1 开始呢？&lt;/h2&gt;
&lt;p&gt;  (1) 从数组存储的内存模型上来看，数组的下标应该是指偏移，如果用 a 来表示数组的首地址，a [0] 就是偏移为 0 的位置，即首地址，a [k] 就是偏移 k 个 type_size 的位置，则计算 a [k] 的内存地址公式为：a [k]_address = base_address + k * type_size&lt;br&gt;
  (2) 而数组若是从 1 开始计数，那么 a [k] 的内存地址计算公式则为：a [k]_address = base_address + k * type_size&lt;br&gt;
  (3) 比较上述两个公式，从 1 开始计数的，每次随机访问数组元素都会多一次减法运算，即 CPU 就会多一次减法指令。而数组作为非常基础的数据结构，通过下标随机访问数组元素又是其非常基础的编程操作，因此其效率的优化就要尽可能做到极致，所以为了减少一次减法操作，数组选择了从 0 开始编号，而不是从 1 开始。&lt;br&gt;
  (4) 数组从 0 开始编码也有一定的历史原因，作为编程语言的鼻祖 C 语言，其数组从 0 开始编码，其他语言如 java，仿 C 语言中数组的写法。&lt;/p&gt;
&lt;h2 id=&#34;适合使用数组的场景&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#适合使用数组的场景&#34;&gt;#&lt;/a&gt; 适合使用数组的场景&lt;/h2&gt;
&lt;p&gt;  (1) 如果特别关注性能或希望使用基本类型，可以选用数组。&lt;br&gt;
  (2) 如果数据大小事先已知，且对数据的操作非常简单，可以直接使用数组。&lt;br&gt;
  (3) 当要表示多维数组时，使用数组往往更直观。&lt;br&gt;
  (4) 在业务开发时，直接使用容器更省时省力；在底层开发时，如开发网络框架、性能的优化，使用数组优于容器。&lt;/p&gt;
&lt;h2 id=&#34;数组与链表的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组与链表的区别&#34;&gt;#&lt;/a&gt; 数组与链表的区别&lt;/h2&gt;
&lt;p&gt;  (1) 数组静态分配内存，链表动态分配内存。&lt;br&gt;
  (2) 数组在内存中连续，链表不连续。&lt;br&gt;
  (3) 数组元素在栈区，链表元素在堆区。&lt;br&gt;
  (4) 数组利用下标定位，时间复杂度是 O (1)，链表定位元素时间复杂度是 O (n)。&lt;br&gt;
  (5) 数组插入或删除元素的时间复杂度是 O (n)，链表插入或删除元素的时间复杂度是 O (1)。&lt;/p&gt;
&lt;h2 id=&#34;js中的数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#js中的数组&#34;&gt;#&lt;/a&gt; js 中的数组&lt;/h2&gt;
&lt;p&gt;  在 javascript 中，数组是一种特殊的对象。&lt;/p&gt;
&lt;h3 id=&#34;数组的创建&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组的创建&#34;&gt;#&lt;/a&gt; 数组的创建&lt;/h3&gt;
&lt;p&gt;  在 javascript 中，数组的创建有两种方式。&lt;br&gt;
  (1) 字面量方式&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const nums &amp;#x3D; [1, 5, 6, 9]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(nums, nums.length) &amp;#x2F;&amp;#x2F; [ 1, 5, 6, 9 ] 4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  (2) 构造函数方式&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let nums &amp;#x3D; new Array(1, 5, 6, 9)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(nums, nums.length) &amp;#x2F;&amp;#x2F; [ 1, 5, 6, 9 ] 4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  在 js 中，数组的数据可以是不同类型的。&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let nums &amp;#x3D; [1, &amp;#39;Jane&amp;#39;, true, null]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(nums, nums.length) &amp;#x2F;&amp;#x2F; [ 1, &amp;#39;Jane&amp;#39;, true, null ] 4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  可以通过 Array.isArray () 判断一个对象是否是数组。&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let nums &amp;#x3D; [1, 5, 6, 9]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(Array.isArray(nums)) &amp;#x2F;&amp;#x2F; true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;数组的读写&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组的读写&#34;&gt;#&lt;/a&gt; 数组的读写&lt;/h3&gt;
&lt;p&gt;  数组的读写采用循环遍历的方式。&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let nums &amp;#x3D; [1, 5, 6, 9]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for (let i &amp;#x3D; 0; i &amp;lt; nums.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(nums[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 结果：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;数组的深拷贝与浅拷贝&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组的深拷贝与浅拷贝&#34;&gt;#&lt;/a&gt; 数组的深拷贝与浅拷贝&lt;/h3&gt;
&lt;p&gt;  (1) 浅复制：将数组赋给另一个数组，当改变其中一个数组的值时，另一个数组也会随之改变。&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let nums &amp;#x3D; [1, 2, 3, 4, 5, 6]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let newNums &amp;#x3D; nums&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nums[0] &amp;#x3D; 9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(nums, newNums) &amp;#x2F;&amp;#x2F; [ 9, 2, 3, 4, 5, 6 ] [ 9, 2, 3, 4, 5, 6 ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  (2) 深复制：不改变原来的数组是情况下去创建一个新的数组。&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let nums &amp;#x3D; [1, 2, 3, 4, 5, 6]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let newNums &amp;#x3D; []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for (let i &amp;#x3D; 0; i &amp;lt; nums.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  newNums[i] &amp;#x3D; nums[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nums[0] &amp;#x3D; 9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(nums, newNums) &amp;#x2F;&amp;#x2F; [ 9, 2, 3, 4, 5, 6 ] [ 1, 2, 3, 4, 5, 6 ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;数组的存取函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组的存取函数&#34;&gt;#&lt;/a&gt; 数组的存取函数&lt;/h3&gt;
&lt;p&gt;  (1) indexOf ()：返回指定查找的值在目标值中是否存在，若存在，返回该值在数组中的索引，若不存在则返回 - 1。&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let words &amp;#x3D; [&amp;#39;q&amp;#39;, &amp;#39;w&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;r&amp;#39;, &amp;#39;t&amp;#39;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(words.indexOf(&amp;#39;w&amp;#39;)) &amp;#x2F;&amp;#x2F; 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(words.indexOf(&amp;#39;p&amp;#39;)) &amp;#x2F;&amp;#x2F; -1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  (2) join () 与 toString ()&lt;br&gt;
  两者都可以将数组转成字符串，但 join () 还可以以某种形式将数组转成字符串。&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let words &amp;#x3D; [&amp;#39;h&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;o&amp;#39;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(words.join()) &amp;#x2F;&amp;#x2F; h,e,l,l,o&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(words.join(&amp;#39;&amp;#39;)) &amp;#x2F;&amp;#x2F; hello&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(words.toString()) &amp;#x2F;&amp;#x2F; h,e,l,l,o&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  (3) concat () 与 splice ()&lt;br&gt;
  两者都是通过已有数组创建新的数组，但 concat () 是通过合并多个数组来形成新的数组，而 splice () 则是截取一个数组的子集作为一个新的数组。&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const arr1 &amp;#x3D; [&amp;#39;hello&amp;#39;, &amp;#39;hi&amp;#39;, &amp;#39;get&amp;#39;, &amp;#39;milk&amp;#39;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const arr2 &amp;#x3D; [&amp;#39;apple&amp;#39;, &amp;#39;banana&amp;#39;, &amp;#39;pear&amp;#39;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let arr &amp;#x3D; arr1.concat(arr2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(arr) &amp;#x2F;&amp;#x2F; [ &amp;#39;hello&amp;#39;, &amp;#39;hi&amp;#39;, &amp;#39;get&amp;#39;, &amp;#39;milk&amp;#39;, &amp;#39;apple&amp;#39;, &amp;#39;banana&amp;#39;, &amp;#39;pear&amp;#39; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const nums &amp;#x3D; [1, 2, 3, 4, 5, 6, 7, 8, 9]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let newNums &amp;#x3D; nums.splice(3, 2) &amp;#x2F;&amp;#x2F; 3 表示索引，2 表示删除的个数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(newNums, nums) &amp;#x2F;&amp;#x2F; [ 4, 5 ] [ 1, 2, 3, 6, 7, 8, 9 ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;数组的可变函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组的可变函数&#34;&gt;#&lt;/a&gt; 数组的可变函数&lt;/h3&gt;
&lt;p&gt;  可变函数：不去引用数组中的某个元素就能改变数组的内容。&lt;br&gt;
  (1) push ()、unshift ()、pop () 与 shift ()&lt;br&gt;
  push ()：在数组末尾添加元素&lt;br&gt;
  unshift ()：在数组开头添加元素&lt;br&gt;
  pop ()：删除数组末尾的元素&lt;br&gt;
  shift ()：删除数组的第一个元素&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let nums &amp;#x3D; [7, 23, 15, 61, 39]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nums.push(53)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(nums) &amp;#x2F;&amp;#x2F; [ 7, 23, 15, 61, 39, 53 ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nums.unshift(20)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(nums) &amp;#x2F;&amp;#x2F; [ 20,  7, 23, 15, 61, 39, 53 ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nums.pop()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(nums) &amp;#x2F;&amp;#x2F; [ 20, 7, 23, 15, 61, 39 ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nums.shift()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(nums) &amp;#x2F;&amp;#x2F; [ 7, 23, 15, 61, 39 ] &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  (2) splice ()、sort () 与 reverse ()&lt;br&gt;
  splice ()：不仅可以用来删除元素，还可以用来添加元素&lt;br&gt;
  sort ()：以 ascii 码的大小进行排序，因而数字排列不准确，但可以自定义排序规则&lt;br&gt;
  reverse ()：将数组内的元素翻转&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let nums &amp;#x3D; [51, 29, 43, 17, 21, 8]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nums.splice(3, 0, 65) &amp;#x2F;&amp;#x2F; 2 表示索引，0 表示不删除元素，65表示往数组中添加的元素&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(nums) &amp;#x2F;&amp;#x2F; [ 51, 29, 43, 65, 17, 21, 8 ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nums.sort()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(nums) &amp;#x2F;&amp;#x2F; [ 17, 21, 29, 43, 51, 65, 8 ] 不准确&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(nums.reverse()) &amp;#x2F;&amp;#x2F; [ 8, 65, 51, 43, 29, 21, 17 ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let words &amp;#x3D; [&amp;#39;hello&amp;#39;, &amp;#39;hi&amp;#39;, &amp;#39;get&amp;#39;, &amp;#39;milk&amp;#39;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(words.sort()) &amp;#x2F;&amp;#x2F; [ &amp;#39;get&amp;#39;, &amp;#39;hello&amp;#39;, &amp;#39;hi&amp;#39;, &amp;#39;milk&amp;#39; ] 按字母a-z排列&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 若使用排序时要想避免数字排序不准确的问题就需要在调用sort()时传入一个函数，该函数可以比较出大小&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nums.sort((a, b) &amp;#x3D;&amp;gt; &amp;#123; &amp;#x2F;&amp;#x2F; 从小到大排序&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return a - b &amp;#x2F;&amp;#x2F; 两数相减，若结果为正，被减数大于减数，若结果为0，两数相等，若结果为负，被减数小于减数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(nums) &amp;#x2F;&amp;#x2F; [ 8, 17, 21, 29, 43, 51, 65 ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;迭代器方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#迭代器方法&#34;&gt;#&lt;/a&gt; 迭代器方法&lt;/h3&gt;
&lt;h4 id=&#34;不返回新数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#不返回新数组&#34;&gt;#&lt;/a&gt; 不返回新数组&lt;/h4&gt;
&lt;p&gt;  (1) forEach ()：遍历数组&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let nums &amp;#x3D; [1, 2, 3, 4, 5, 6]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nums.forEach(function(item) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(item, item * item)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 结果：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 1 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 2 4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 3 9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 4 16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 5 25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 6 36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  (2) every ()：返回 Boolean 类型，对于应用的所有元素，返回 true&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let nums &amp;#x3D; [1, 3, 5, 7]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function isOdd(num) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(num)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return num % 2 !&amp;#x3D;&amp;#x3D; 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; console.log(nums.every(isOdd))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 结果：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  (3) some ()：与 every () 不同的是只要有一个元素使该函数返回 true，那么就返回 true&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let nums &amp;#x3D; [1, 3, 5, 7]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function isOdd(num) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(num)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return num % 2 !&amp;#x3D;&amp;#x3D; 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(nums.some(isOdd))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 结果：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  (4) reduce ()：既可以对数组元素进行求和，也可以将数组元素连接成字符串&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let nums &amp;#x3D; [1, 2, 3, 4, 5]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let sum &amp;#x3D; nums.reduce((a, b) &amp;#x3D;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return a + b&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(sum) &amp;#x2F;&amp;#x2F; 15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let words &amp;#x3D; [&amp;#39;I &amp;#39;, &amp;#39;like &amp;#39;, &amp;#39;china&amp;#39;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let str &amp;#x3D; words.reduce((item, i) &amp;#x3D;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return item + i&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(str) &amp;#x2F;&amp;#x2F; I like china&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;返回新数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#返回新数组&#34;&gt;#&lt;/a&gt; 返回新数组&lt;/h4&gt;
&lt;p&gt;  (1) map ()：与 forEach 一样，但 map () 返回的是一个新数组&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let nums &amp;#x3D; [52, 16, 87, 63, 29]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let result &amp;#x3D; nums.map(item &amp;#x3D;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  console.log(item)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return item +&amp;#x3D; 5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(result)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 结果：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; [ 57, 21, 92, 68, 34 ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  (2) filter：与 every 相似，区别在于当所有元素使该函数为 true 时，它返回的是一个新的数组，而不是 Boolean 类型&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let nums &amp;#x3D; []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for (let i &amp;#x3D; 0; i &amp;lt; 10; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  nums[i] &amp;#x3D; Math.floor(Math.random() * 101)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let result &amp;#x3D; nums.filter(item &amp;#x3D;&amp;gt; item &amp;gt;&amp;#x3D; 60)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(nums, result) &amp;#x2F;&amp;#x2F; [ 5, 18, 33, 74, 6, 69, 79, 78, 61, 93 ] [ 74, 69, 79, 78, 61, 93 ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;数组的其他常用方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组的其他常用方法&#34;&gt;#&lt;/a&gt; 数组的其他常用方法&lt;/h3&gt;
&lt;p&gt;  (1) indexOf () 与 lastIndexOf ()&lt;br&gt;
  indexOf ()：返回返回调用 String 对象中第一次出现的指定值的索引，若不存在则返回 - 1&lt;br&gt;
  lastIndexOf ()：返回指定元素在数组中的最后一个的索引，如果不存在则返回 - 1&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let nums &amp;#x3D; [2, 5, 8, 6, 7]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(nums.indexOf(3)) &amp;#x2F;&amp;#x2F; -1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(nums.indexOf(6)) &amp;#x2F;&amp;#x2F; 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(nums.lastIndexOf(5)) &amp;#x2F;&amp;#x2F; 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(nums.lastIndexOf(1)) &amp;#x2F;&amp;#x2F; -1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  (2) includes ()：用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回 false&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let nums &amp;#x3D; [1, 2, 3, 4, 5, NaN]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(nums.includes(2)) &amp;#x2F;&amp;#x2F; true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(nums.includes(6)) &amp;#x2F;&amp;#x2F; false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(nums.includes(3, 3)) &amp;#x2F;&amp;#x2F; false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(nums.includes(4, -1)) &amp;#x2F;&amp;#x2F; false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(nums.includes(NaN)) &amp;#x2F;&amp;#x2F; true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  (3) fill ()：用一个固定值填充一个数组中从起始索引到终止索引内的全部元素，但不包括终止索引&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let nums &amp;#x3D; [1, 2, 3, 4, 5];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nums &amp;#x3D; new Array(nums.length).fill(0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(nums) &amp;#x2F;&amp;#x2F; [ 0, 0, 0, 0, 0 ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  (4) find () 与 findIndex ()&lt;br&gt;
  find ()：返回数组中满足提供的测试函数的第一个元素的值，否则返回 undefined&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const fruits &amp;#x3D; [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123;name: &amp;#39;apples&amp;#39;, quantity: 3&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123;name: &amp;#39;bananas&amp;#39;, quantity: 2&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123;name: &amp;#39;pears&amp;#39;, quantity: 5&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function findBananas(fruit) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return fruit.name &amp;#x3D;&amp;#x3D;&amp;#x3D; &amp;#39;bananas&amp;#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(fruits.find(findBananas)) &amp;#x2F;&amp;#x2F; &amp;#123; name: &amp;#39;bananas&amp;#39;, quantity: 2 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  findIndex ()：返回数组中满足提供的测试函数的第一个元素的索引，否则返回 - 1&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const grades &amp;#x3D; [45, 68, 76, 31, 93];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function isPass(grade) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return grade &amp;gt;&amp;#x3D; 60;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;console.log(grades.findIndex(isPass)) &amp;#x2F;&amp;#x2F; 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;二维数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二维数组&#34;&gt;#&lt;/a&gt; 二维数组&lt;/h3&gt;
&lt;h4 id=&#34;二维数组的创建&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二维数组的创建&#34;&gt;#&lt;/a&gt; 二维数组的创建&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; let nums &amp;#x3D; [[1, 3, 5], [2, 9, 6]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; console.log(nums[1][2]) &amp;#x2F;&amp;#x2F; 6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;二维数组的访问&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二维数组的访问&#34;&gt;#&lt;/a&gt; 二维数组的访问&lt;/h4&gt;
&lt;p&gt;  (1) 按列访问&lt;br&gt;
  内层循环行，内层循环列&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let nums &amp;#x3D; [[1, 3, 5], [2, 9, 6]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for (let i &amp;#x3D; 0; i &amp;lt; nums.length; i++) &amp;#123; &amp;#x2F;&amp;#x2F; 行&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  for (let j &amp;#x3D; 0; j &amp;lt; nums[i].length; j++) &amp;#123; &amp;#x2F;&amp;#x2F; 列&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    console.log(nums[i][j])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 结果：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  (2) 按行访问&lt;br&gt;
  内层循环列，内层循环行&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let nums &amp;#x3D; [[1, 3, 5], [2, 9, 6]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for (let i &amp;#x3D; 0; i &amp;lt; nums[0].length; i++) &amp;#123; &amp;#x2F;&amp;#x2F; 行&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  for (let j &amp;#x3D; 0; j &amp;lt; nums.length; j++) &amp;#123; &amp;#x2F;&amp;#x2F; 列&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    console.log(nums[j][i])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 结果：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;对象数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对象数组&#34;&gt;#&lt;/a&gt; 对象数组&lt;/h3&gt;
&lt;h4 id=&#34;对象数组的创建&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对象数组的创建&#34;&gt;#&lt;/a&gt; 对象数组的创建&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function Point(x, y) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  this.x &amp;#x3D; x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  this.y &amp;#x3D; y&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function show(arr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  for (let i &amp;#x3D; 0; i &amp;lt; arr.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    console.log(arr[i], arr[i].x, arr[i].y)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let p1 &amp;#x3D; new Point(1, 2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let p2 &amp;#x3D; new Point(6, 9)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let p3 &amp;#x3D; new Point(5, 7)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let p4 &amp;#x3D; new Point(8, 3)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let arr &amp;#x3D; [p1, p2, p3, p4]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;show(arr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 结果：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; Point &amp;#123; x: 1, y: 2 &amp;#125; 1 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; Point &amp;#123; x: 6, y: 9 &amp;#125; 6 9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; Point &amp;#123; x: 5, y: 7 &amp;#125; 5 7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; Point &amp;#123; x: 8, y: 3 &amp;#125; 8 3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;对象数组也可以使用数组的方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对象数组也可以使用数组的方法&#34;&gt;#&lt;/a&gt; 对象数组也可以使用数组的方法&lt;/h4&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let p5 &amp;#x3D; new Point(9, 4)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 末尾添加元素&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;arr.push(p5)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;show(arr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 结果：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; Point &amp;#123; x: 1, y: 2 &amp;#125; 1 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; Point &amp;#123; x: 6, y: 9 &amp;#125; 6 9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; Point &amp;#123; x: 5, y: 7 &amp;#125; 5 7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; Point &amp;#123; x: 8, y: 3 &amp;#125; 8 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; Point &amp;#123; x: 9, y: 4 &amp;#125; 9 4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 头部添加元素&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let p6 &amp;#x3D; new Point(7, 2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;arr.unshift(p6)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;show(arr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 结果：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; Point &amp;#123; x: 7, y: 2 &amp;#125; 7 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; Point &amp;#123; x: 1, y: 2 &amp;#125; 1 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; Point &amp;#123; x: 6, y: 9 &amp;#125; 6 9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; Point &amp;#123; x: 5, y: 7 &amp;#125; 5 7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; Point &amp;#123; x: 8, y: 3 &amp;#125; 8 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; Point &amp;#123; x: 9, y: 4 &amp;#125; 9 4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 尾部删除元素&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;arr.pop()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;show(arr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 结果：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; Point &amp;#123; x: 7, y: 2 &amp;#125; 7 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; Point &amp;#123; x: 1, y: 2 &amp;#125; 1 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; Point &amp;#123; x: 6, y: 9 &amp;#125; 6 9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; Point &amp;#123; x: 5, y: 7 &amp;#125; 5 7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; Point &amp;#123; x: 8, y: 3 &amp;#125; 8 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 头部删除元素&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;arr.shift()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;show(arr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 结果：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; Point &amp;#123; x: 1, y: 2 &amp;#125; 1 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; Point &amp;#123; x: 6, y: 9 &amp;#125; 6 9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; Point &amp;#123; x: 5, y: 7 &amp;#125; 5 7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; Point &amp;#123; x: 8, y: 3 &amp;#125; 8 3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;参考来源&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#参考来源&#34;&gt;#&lt;/a&gt; 参考来源&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.runoob.com/&#34;&gt;https://www.runoob.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?src=11&amp;amp;timestamp=1610508954&amp;amp;ver=2825&amp;amp;signature=MuT3T&#34;&gt;https://mp.weixin.qq.com/s?src=11&amp;amp;timestamp=1610508954&amp;amp;ver=2825&amp;amp;signature=MuT3T&lt;/a&gt;&lt;em&gt;76&lt;/em&gt;THSu0W8eqIwpy53lEn7LhmomX4g2GiW5&lt;em&gt;Cru01QsvR59tSuGT&lt;/em&gt;IegVDMJl9ZtsgkEbE6gJf3Byjp7AelMmVLmupNuiG68X1tNaVQ9y*EZ6cRliWODj91Req&amp;amp;new=1&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/380508881e3642849ec0ea8fd88ec6e0~tplv-k3u1fbpfcp-watermark.image&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;最后&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最后&#34;&gt;#&lt;/a&gt; 最后&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;如果喜欢我的文章请 &amp;quot; &lt;strong&gt;点赞&lt;/strong&gt; &amp;quot; &amp;quot; &lt;strong&gt;评论&lt;/strong&gt; &amp;quot; &amp;quot; &lt;strong&gt;关注&lt;/strong&gt; ，大家的支持就是我坚持下去的动力！若是以上内容有任何错误或者不准确的地方，欢迎留言指出，若你有更好的想法，也欢迎一起交流学习！&lt;/p&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
    </channel>
</rss>
