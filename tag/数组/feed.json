{
    "version": "https://jsonfeed.org/version/1",
    "title": "星语の博客 • All posts by \"数组\" tag",
    "description": "",
    "home_page_url": "https://ttt2021.github.io",
    "items": [
        {
            "id": "https://ttt2021.github.io/posts/c1d0a512/",
            "url": "https://ttt2021.github.io/posts/c1d0a512/",
            "title": "数据结构与算法之数组",
            "date_published": "2021-05-15T12:24:52.968Z",
            "content_html": "<h2 id=\"什么是数组\"><a class=\"markdownIt-Anchor\" href=\"#什么是数组\">#</a> 什么是数组</h2>\n<p>  (1) 数组是一种线性表数据结构。<br>\n  线性表：数据排成像一条线一样的结构 数据最多只有前和后两个方向，如数组、链表、队列、栈采用的就是线性表。<br>\n  线性表：数非线性表：数据之间并不是简单的前后关系，如二叉树、堆、图采用的就是非线性表。<br>\n  (2) 用一组连续的内存空间来存储一组具有相同类型的数据。<p></p>\n<h2 id=\"为什么在大多数编程语言中数组要从0开始编码而不是从1开始呢\"><a class=\"markdownIt-Anchor\" href=\"#为什么在大多数编程语言中数组要从0开始编码而不是从1开始呢\">#</a> 为什么在大多数编程语言中，数组要从 0 开始编码，而不是从 1 开始呢？</h2>\n<p>  (1) 从数组存储的内存模型上来看，数组的下标应该是指偏移，如果用 a 来表示数组的首地址，a [0] 就是偏移为 0 的位置，即首地址，a [k] 就是偏移 k 个 type_size 的位置，则计算 a [k] 的内存地址公式为：a [k]_address = base_address + k * type_size<br>\n  (2) 而数组若是从 1 开始计数，那么 a [k] 的内存地址计算公式则为：a [k]_address = base_address + k * type_size<br>\n  (3) 比较上述两个公式，从 1 开始计数的，每次随机访问数组元素都会多一次减法运算，即 CPU 就会多一次减法指令。而数组作为非常基础的数据结构，通过下标随机访问数组元素又是其非常基础的编程操作，因此其效率的优化就要尽可能做到极致，所以为了减少一次减法操作，数组选择了从 0 开始编号，而不是从 1 开始。<br>\n  (4) 数组从 0 开始编码也有一定的历史原因，作为编程语言的鼻祖 C 语言，其数组从 0 开始编码，其他语言如 java，仿 C 语言中数组的写法。</p>\n<h2 id=\"适合使用数组的场景\"><a class=\"markdownIt-Anchor\" href=\"#适合使用数组的场景\">#</a> 适合使用数组的场景</h2>\n<p>  (1) 如果特别关注性能或希望使用基本类型，可以选用数组。<br>\n  (2) 如果数据大小事先已知，且对数据的操作非常简单，可以直接使用数组。<br>\n  (3) 当要表示多维数组时，使用数组往往更直观。<br>\n  (4) 在业务开发时，直接使用容器更省时省力；在底层开发时，如开发网络框架、性能的优化，使用数组优于容器。</p>\n<h2 id=\"数组与链表的区别\"><a class=\"markdownIt-Anchor\" href=\"#数组与链表的区别\">#</a> 数组与链表的区别</h2>\n<p>  (1) 数组静态分配内存，链表动态分配内存。<br>\n  (2) 数组在内存中连续，链表不连续。<br>\n  (3) 数组元素在栈区，链表元素在堆区。<br>\n  (4) 数组利用下标定位，时间复杂度是 O (1)，链表定位元素时间复杂度是 O (n)。<br>\n  (5) 数组插入或删除元素的时间复杂度是 O (n)，链表插入或删除元素的时间复杂度是 O (1)。</p>\n<h2 id=\"js中的数组\"><a class=\"markdownIt-Anchor\" href=\"#js中的数组\">#</a> js 中的数组</h2>\n<p>  在 javascript 中，数组是一种特殊的对象。</p>\n<h3 id=\"数组的创建\"><a class=\"markdownIt-Anchor\" href=\"#数组的创建\">#</a> 数组的创建</h3>\n<p>  在 javascript 中，数组的创建有两种方式。<br>\n  (1) 字面量方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const nums &#x3D; [1, 5, 6, 9]</span><br><span class=\"line\">console.log(nums, nums.length) &#x2F;&#x2F; [ 1, 5, 6, 9 ] 4</span><br></pre></td></tr></table></figure>\n<p>  (2) 构造函数方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; new Array(1, 5, 6, 9)</span><br><span class=\"line\">console.log(nums, nums.length) &#x2F;&#x2F; [ 1, 5, 6, 9 ] 4</span><br></pre></td></tr></table></figure>\n<p>  在 js 中，数组的数据可以是不同类型的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; [1, &#39;Jane&#39;, true, null]</span><br><span class=\"line\">console.log(nums, nums.length) &#x2F;&#x2F; [ 1, &#39;Jane&#39;, true, null ] 4</span><br></pre></td></tr></table></figure>\n<p>  可以通过 Array.isArray () 判断一个对象是否是数组。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; [1, 5, 6, 9]</span><br><span class=\"line\">console.log(Array.isArray(nums)) &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组的读写\"><a class=\"markdownIt-Anchor\" href=\"#数组的读写\">#</a> 数组的读写</h3>\n<p>  数组的读写采用循环遍历的方式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; [1, 5, 6, 9]</span><br><span class=\"line\">for (let i &#x3D; 0; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">  console.log(nums[i])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; 结果：</span><br><span class=\"line\">&#x2F;&#x2F; 1</span><br><span class=\"line\">&#x2F;&#x2F; 5</span><br><span class=\"line\">&#x2F;&#x2F; 6</span><br><span class=\"line\">&#x2F;&#x2F; 9</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组的深拷贝与浅拷贝\"><a class=\"markdownIt-Anchor\" href=\"#数组的深拷贝与浅拷贝\">#</a> 数组的深拷贝与浅拷贝</h3>\n<p>  (1) 浅复制：将数组赋给另一个数组，当改变其中一个数组的值时，另一个数组也会随之改变。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; [1, 2, 3, 4, 5, 6]</span><br><span class=\"line\">let newNums &#x3D; nums</span><br><span class=\"line\">nums[0] &#x3D; 9</span><br><span class=\"line\">console.log(nums, newNums) &#x2F;&#x2F; [ 9, 2, 3, 4, 5, 6 ] [ 9, 2, 3, 4, 5, 6 ]</span><br></pre></td></tr></table></figure>\n<p>  (2) 深复制：不改变原来的数组是情况下去创建一个新的数组。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; [1, 2, 3, 4, 5, 6]</span><br><span class=\"line\">let newNums &#x3D; []</span><br><span class=\"line\">for (let i &#x3D; 0; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">  newNums[i] &#x3D; nums[i]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">nums[0] &#x3D; 9</span><br><span class=\"line\">console.log(nums, newNums) &#x2F;&#x2F; [ 9, 2, 3, 4, 5, 6 ] [ 1, 2, 3, 4, 5, 6 ]</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组的存取函数\"><a class=\"markdownIt-Anchor\" href=\"#数组的存取函数\">#</a> 数组的存取函数</h3>\n<p>  (1) indexOf ()：返回指定查找的值在目标值中是否存在，若存在，返回该值在数组中的索引，若不存在则返回 - 1。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let words &#x3D; [&#39;q&#39;, &#39;w&#39;, &#39;e&#39;, &#39;r&#39;, &#39;t&#39;]</span><br><span class=\"line\">console.log(words.indexOf(&#39;w&#39;)) &#x2F;&#x2F; 1</span><br><span class=\"line\">console.log(words.indexOf(&#39;p&#39;)) &#x2F;&#x2F; -1</span><br></pre></td></tr></table></figure>\n<p>  (2) join () 与 toString ()<br>\n  两者都可以将数组转成字符串，但 join () 还可以以某种形式将数组转成字符串。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let words &#x3D; [&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;]</span><br><span class=\"line\">console.log(words.join()) &#x2F;&#x2F; h,e,l,l,o</span><br><span class=\"line\">console.log(words.join(&#39;&#39;)) &#x2F;&#x2F; hello</span><br><span class=\"line\">console.log(words.toString()) &#x2F;&#x2F; h,e,l,l,o</span><br></pre></td></tr></table></figure>\n<p>  (3) concat () 与 splice ()<br>\n  两者都是通过已有数组创建新的数组，但 concat () 是通过合并多个数组来形成新的数组，而 splice () 则是截取一个数组的子集作为一个新的数组。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const arr1 &#x3D; [&#39;hello&#39;, &#39;hi&#39;, &#39;get&#39;, &#39;milk&#39;]</span><br><span class=\"line\">const arr2 &#x3D; [&#39;apple&#39;, &#39;banana&#39;, &#39;pear&#39;]</span><br><span class=\"line\">let arr &#x3D; arr1.concat(arr2)</span><br><span class=\"line\">console.log(arr) &#x2F;&#x2F; [ &#39;hello&#39;, &#39;hi&#39;, &#39;get&#39;, &#39;milk&#39;, &#39;apple&#39;, &#39;banana&#39;, &#39;pear&#39; ]</span><br><span class=\"line\">const nums &#x3D; [1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class=\"line\">let newNums &#x3D; nums.splice(3, 2) &#x2F;&#x2F; 3 表示索引，2 表示删除的个数</span><br><span class=\"line\">console.log(newNums, nums) &#x2F;&#x2F; [ 4, 5 ] [ 1, 2, 3, 6, 7, 8, 9 ]</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组的可变函数\"><a class=\"markdownIt-Anchor\" href=\"#数组的可变函数\">#</a> 数组的可变函数</h3>\n<p>  可变函数：不去引用数组中的某个元素就能改变数组的内容。<br>\n  (1) push ()、unshift ()、pop () 与 shift ()<br>\n  push ()：在数组末尾添加元素<br>\n  unshift ()：在数组开头添加元素<br>\n  pop ()：删除数组末尾的元素<br>\n  shift ()：删除数组的第一个元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; [7, 23, 15, 61, 39]</span><br><span class=\"line\">nums.push(53)</span><br><span class=\"line\">console.log(nums) &#x2F;&#x2F; [ 7, 23, 15, 61, 39, 53 ]</span><br><span class=\"line\">nums.unshift(20)</span><br><span class=\"line\">console.log(nums) &#x2F;&#x2F; [ 20,  7, 23, 15, 61, 39, 53 ]</span><br><span class=\"line\">nums.pop()</span><br><span class=\"line\">console.log(nums) &#x2F;&#x2F; [ 20, 7, 23, 15, 61, 39 ]</span><br><span class=\"line\">nums.shift()</span><br><span class=\"line\">console.log(nums) &#x2F;&#x2F; [ 7, 23, 15, 61, 39 ] </span><br></pre></td></tr></table></figure>\n<p>  (2) splice ()、sort () 与 reverse ()<br>\n  splice ()：不仅可以用来删除元素，还可以用来添加元素<br>\n  sort ()：以 ascii 码的大小进行排序，因而数字排列不准确，但可以自定义排序规则<br>\n  reverse ()：将数组内的元素翻转</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; [51, 29, 43, 17, 21, 8]</span><br><span class=\"line\">nums.splice(3, 0, 65) &#x2F;&#x2F; 2 表示索引，0 表示不删除元素，65表示往数组中添加的元素</span><br><span class=\"line\">console.log(nums) &#x2F;&#x2F; [ 51, 29, 43, 65, 17, 21, 8 ]</span><br><span class=\"line\">nums.sort()</span><br><span class=\"line\">console.log(nums) &#x2F;&#x2F; [ 17, 21, 29, 43, 51, 65, 8 ] 不准确</span><br><span class=\"line\">console.log(nums.reverse()) &#x2F;&#x2F; [ 8, 65, 51, 43, 29, 21, 17 ]</span><br><span class=\"line\">let words &#x3D; [&#39;hello&#39;, &#39;hi&#39;, &#39;get&#39;, &#39;milk&#39;]</span><br><span class=\"line\">console.log(words.sort()) &#x2F;&#x2F; [ &#39;get&#39;, &#39;hello&#39;, &#39;hi&#39;, &#39;milk&#39; ] 按字母a-z排列</span><br><span class=\"line\">&#x2F;&#x2F; 若使用排序时要想避免数字排序不准确的问题就需要在调用sort()时传入一个函数，该函数可以比较出大小</span><br><span class=\"line\">nums.sort((a, b) &#x3D;&gt; &#123; &#x2F;&#x2F; 从小到大排序</span><br><span class=\"line\">  return a - b &#x2F;&#x2F; 两数相减，若结果为正，被减数大于减数，若结果为0，两数相等，若结果为负，被减数小于减数</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(nums) &#x2F;&#x2F; [ 8, 17, 21, 29, 43, 51, 65 ]</span><br></pre></td></tr></table></figure>\n<h3 id=\"迭代器方法\"><a class=\"markdownIt-Anchor\" href=\"#迭代器方法\">#</a> 迭代器方法</h3>\n<h4 id=\"不返回新数组\"><a class=\"markdownIt-Anchor\" href=\"#不返回新数组\">#</a> 不返回新数组</h4>\n<p>  (1) forEach ()：遍历数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; [1, 2, 3, 4, 5, 6]</span><br><span class=\"line\">nums.forEach(function(item) &#123;</span><br><span class=\"line\">  console.log(item, item * item)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#x2F;&#x2F; 结果：</span><br><span class=\"line\">&#x2F;&#x2F; 1 1</span><br><span class=\"line\">&#x2F;&#x2F; 2 4</span><br><span class=\"line\">&#x2F;&#x2F; 3 9</span><br><span class=\"line\">&#x2F;&#x2F; 4 16</span><br><span class=\"line\">&#x2F;&#x2F; 5 25</span><br><span class=\"line\">&#x2F;&#x2F; 6 36</span><br></pre></td></tr></table></figure>\n<p>  (2) every ()：返回 Boolean 类型，对于应用的所有元素，返回 true</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; [1, 3, 5, 7]</span><br><span class=\"line\">function isOdd(num) &#123;</span><br><span class=\"line\">  console.log(num)</span><br><span class=\"line\">  return num % 2 !&#x3D;&#x3D; 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; console.log(nums.every(isOdd))</span><br><span class=\"line\">&#x2F;&#x2F; 结果：</span><br><span class=\"line\">&#x2F;&#x2F; 1</span><br><span class=\"line\">&#x2F;&#x2F; 3</span><br><span class=\"line\">&#x2F;&#x2F; 5</span><br><span class=\"line\">&#x2F;&#x2F; 7</span><br><span class=\"line\">&#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>\n<p>  (3) some ()：与 every () 不同的是只要有一个元素使该函数返回 true，那么就返回 true</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; [1, 3, 5, 7]</span><br><span class=\"line\">function isOdd(num) &#123;</span><br><span class=\"line\">  console.log(num)</span><br><span class=\"line\">  return num % 2 !&#x3D;&#x3D; 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(nums.some(isOdd))</span><br><span class=\"line\">&#x2F;&#x2F; 结果：</span><br><span class=\"line\">&#x2F;&#x2F; 1</span><br><span class=\"line\">&#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>\n<p>  (4) reduce ()：既可以对数组元素进行求和，也可以将数组元素连接成字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; [1, 2, 3, 4, 5]</span><br><span class=\"line\">let sum &#x3D; nums.reduce((a, b) &#x3D;&gt; &#123;</span><br><span class=\"line\">  return a + b</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(sum) &#x2F;&#x2F; 15</span><br><span class=\"line\">let words &#x3D; [&#39;I &#39;, &#39;like &#39;, &#39;china&#39;]</span><br><span class=\"line\">let str &#x3D; words.reduce((item, i) &#x3D;&gt; &#123;</span><br><span class=\"line\">  return item + i</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(str) &#x2F;&#x2F; I like china</span><br></pre></td></tr></table></figure>\n<h4 id=\"返回新数组\"><a class=\"markdownIt-Anchor\" href=\"#返回新数组\">#</a> 返回新数组</h4>\n<p>  (1) map ()：与 forEach 一样，但 map () 返回的是一个新数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; [52, 16, 87, 63, 29]</span><br><span class=\"line\">let result &#x3D; nums.map(item &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(item)</span><br><span class=\"line\">  return item +&#x3D; 5</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(result)</span><br><span class=\"line\">&#x2F;&#x2F; 结果：</span><br><span class=\"line\">&#x2F;&#x2F; 52</span><br><span class=\"line\">&#x2F;&#x2F; 16</span><br><span class=\"line\">&#x2F;&#x2F; 87</span><br><span class=\"line\">&#x2F;&#x2F; 63</span><br><span class=\"line\">&#x2F;&#x2F; 29</span><br><span class=\"line\">&#x2F;&#x2F; [ 57, 21, 92, 68, 34 ]</span><br></pre></td></tr></table></figure>\n<p>  (2) filter：与 every 相似，区别在于当所有元素使该函数为 true 时，它返回的是一个新的数组，而不是 Boolean 类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; []</span><br><span class=\"line\">for (let i &#x3D; 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">  nums[i] &#x3D; Math.floor(Math.random() * 101)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let result &#x3D; nums.filter(item &#x3D;&gt; item &gt;&#x3D; 60)</span><br><span class=\"line\">console.log(nums, result) &#x2F;&#x2F; [ 5, 18, 33, 74, 6, 69, 79, 78, 61, 93 ] [ 74, 69, 79, 78, 61, 93 ]</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组的其他常用方法\"><a class=\"markdownIt-Anchor\" href=\"#数组的其他常用方法\">#</a> 数组的其他常用方法</h3>\n<p>  (1) indexOf () 与 lastIndexOf ()<br>\n  indexOf ()：返回返回调用 String 对象中第一次出现的指定值的索引，若不存在则返回 - 1<br>\n  lastIndexOf ()：返回指定元素在数组中的最后一个的索引，如果不存在则返回 - 1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; [2, 5, 8, 6, 7]</span><br><span class=\"line\">console.log(nums.indexOf(3)) &#x2F;&#x2F; -1</span><br><span class=\"line\">console.log(nums.indexOf(6)) &#x2F;&#x2F; 3</span><br><span class=\"line\">console.log(nums.lastIndexOf(5)) &#x2F;&#x2F; 1</span><br><span class=\"line\">console.log(nums.lastIndexOf(1)) &#x2F;&#x2F; -1</span><br></pre></td></tr></table></figure>\n<p>  (2) includes ()：用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回 false</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; [1, 2, 3, 4, 5, NaN]</span><br><span class=\"line\">console.log(nums.includes(2)) &#x2F;&#x2F; true</span><br><span class=\"line\">console.log(nums.includes(6)) &#x2F;&#x2F; false</span><br><span class=\"line\">console.log(nums.includes(3, 3)) &#x2F;&#x2F; false</span><br><span class=\"line\">console.log(nums.includes(4, -1)) &#x2F;&#x2F; false</span><br><span class=\"line\">console.log(nums.includes(NaN)) &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>\n<p>  (3) fill ()：用一个固定值填充一个数组中从起始索引到终止索引内的全部元素，但不包括终止索引</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; [1, 2, 3, 4, 5];</span><br><span class=\"line\">nums &#x3D; new Array(nums.length).fill(0);</span><br><span class=\"line\">console.log(nums) &#x2F;&#x2F; [ 0, 0, 0, 0, 0 ]</span><br></pre></td></tr></table></figure>\n<p>  (4) find () 与 findIndex ()<br>\n  find ()：返回数组中满足提供的测试函数的第一个元素的值，否则返回 undefined</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fruits &#x3D; [</span><br><span class=\"line\">  &#123;name: &#39;apples&#39;, quantity: 3&#125;,</span><br><span class=\"line\">  &#123;name: &#39;bananas&#39;, quantity: 2&#125;,</span><br><span class=\"line\">  &#123;name: &#39;pears&#39;, quantity: 5&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">function findBananas(fruit) &#123; </span><br><span class=\"line\">  return fruit.name &#x3D;&#x3D;&#x3D; &#39;bananas&#39;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(fruits.find(findBananas)) &#x2F;&#x2F; &#123; name: &#39;bananas&#39;, quantity: 2 &#125;</span><br></pre></td></tr></table></figure>\n<p>  findIndex ()：返回数组中满足提供的测试函数的第一个元素的索引，否则返回 - 1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const grades &#x3D; [45, 68, 76, 31, 93];</span><br><span class=\"line\"></span><br><span class=\"line\">function isPass(grade) &#123;</span><br><span class=\"line\">  return grade &gt;&#x3D; 60;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(grades.findIndex(isPass)) &#x2F;&#x2F; 1</span><br></pre></td></tr></table></figure>\n<h3 id=\"二维数组\"><a class=\"markdownIt-Anchor\" href=\"#二维数组\">#</a> 二维数组</h3>\n<h4 id=\"二维数组的创建\"><a class=\"markdownIt-Anchor\" href=\"#二维数组的创建\">#</a> 二维数组的创建</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; let nums &#x3D; [[1, 3, 5], [2, 9, 6]]</span><br><span class=\"line\">&#x2F;&#x2F; console.log(nums[1][2]) &#x2F;&#x2F; 6</span><br></pre></td></tr></table></figure>\n<h4 id=\"二维数组的访问\"><a class=\"markdownIt-Anchor\" href=\"#二维数组的访问\">#</a> 二维数组的访问</h4>\n<p>  (1) 按列访问<br>\n  内层循环行，内层循环列</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; [[1, 3, 5], [2, 9, 6]]</span><br><span class=\"line\">for (let i &#x3D; 0; i &lt; nums.length; i++) &#123; &#x2F;&#x2F; 行</span><br><span class=\"line\">  for (let j &#x3D; 0; j &lt; nums[i].length; j++) &#123; &#x2F;&#x2F; 列</span><br><span class=\"line\">    console.log(nums[i][j])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; 结果：</span><br><span class=\"line\">&#x2F;&#x2F; 1</span><br><span class=\"line\">&#x2F;&#x2F; 3</span><br><span class=\"line\">&#x2F;&#x2F; 5</span><br><span class=\"line\">&#x2F;&#x2F; 2</span><br><span class=\"line\">&#x2F;&#x2F; 9</span><br><span class=\"line\">&#x2F;&#x2F; 6</span><br></pre></td></tr></table></figure>\n<p>  (2) 按行访问<br>\n  内层循环列，内层循环行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; [[1, 3, 5], [2, 9, 6]]</span><br><span class=\"line\">for (let i &#x3D; 0; i &lt; nums[0].length; i++) &#123; &#x2F;&#x2F; 行</span><br><span class=\"line\">  for (let j &#x3D; 0; j &lt; nums.length; j++) &#123; &#x2F;&#x2F; 列</span><br><span class=\"line\">    console.log(nums[j][i])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; 结果：</span><br><span class=\"line\">&#x2F;&#x2F; 1</span><br><span class=\"line\">&#x2F;&#x2F; 2</span><br><span class=\"line\">&#x2F;&#x2F; 3</span><br><span class=\"line\">&#x2F;&#x2F; 9</span><br><span class=\"line\">&#x2F;&#x2F; 5</span><br><span class=\"line\">&#x2F;&#x2F; 6</span><br></pre></td></tr></table></figure>\n<h3 id=\"对象数组\"><a class=\"markdownIt-Anchor\" href=\"#对象数组\">#</a> 对象数组</h3>\n<h4 id=\"对象数组的创建\"><a class=\"markdownIt-Anchor\" href=\"#对象数组的创建\">#</a> 对象数组的创建</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Point(x, y) &#123;</span><br><span class=\"line\">  this.x &#x3D; x</span><br><span class=\"line\">  this.y &#x3D; y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function show(arr) &#123;</span><br><span class=\"line\">  for (let i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    console.log(arr[i], arr[i].x, arr[i].y)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let p1 &#x3D; new Point(1, 2)</span><br><span class=\"line\">let p2 &#x3D; new Point(6, 9)</span><br><span class=\"line\">let p3 &#x3D; new Point(5, 7)</span><br><span class=\"line\">let p4 &#x3D; new Point(8, 3)</span><br><span class=\"line\"></span><br><span class=\"line\">let arr &#x3D; [p1, p2, p3, p4]</span><br><span class=\"line\">show(arr)</span><br><span class=\"line\">&#x2F;&#x2F; 结果：</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 1, y: 2 &#125; 1 2</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 6, y: 9 &#125; 6 9</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 5, y: 7 &#125; 5 7</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 8, y: 3 &#125; 8 3</span><br></pre></td></tr></table></figure>\n<h4 id=\"对象数组也可以使用数组的方法\"><a class=\"markdownIt-Anchor\" href=\"#对象数组也可以使用数组的方法\">#</a> 对象数组也可以使用数组的方法</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let p5 &#x3D; new Point(9, 4)</span><br><span class=\"line\">&#x2F;&#x2F; 末尾添加元素</span><br><span class=\"line\">arr.push(p5)</span><br><span class=\"line\">show(arr)</span><br><span class=\"line\">&#x2F;&#x2F; 结果：</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 1, y: 2 &#125; 1 2</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 6, y: 9 &#125; 6 9</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 5, y: 7 &#125; 5 7</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 8, y: 3 &#125; 8 3</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 9, y: 4 &#125; 9 4</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 头部添加元素</span><br><span class=\"line\">let p6 &#x3D; new Point(7, 2)</span><br><span class=\"line\">arr.unshift(p6)</span><br><span class=\"line\">show(arr)</span><br><span class=\"line\">&#x2F;&#x2F; 结果：</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 7, y: 2 &#125; 7 2</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 1, y: 2 &#125; 1 2</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 6, y: 9 &#125; 6 9</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 5, y: 7 &#125; 5 7</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 8, y: 3 &#125; 8 3</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 9, y: 4 &#125; 9 4</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 尾部删除元素</span><br><span class=\"line\">arr.pop()</span><br><span class=\"line\">show(arr)</span><br><span class=\"line\">&#x2F;&#x2F; 结果：</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 7, y: 2 &#125; 7 2</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 1, y: 2 &#125; 1 2</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 6, y: 9 &#125; 6 9</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 5, y: 7 &#125; 5 7</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 8, y: 3 &#125; 8 3</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 头部删除元素</span><br><span class=\"line\">arr.shift()</span><br><span class=\"line\">show(arr)</span><br><span class=\"line\">&#x2F;&#x2F; 结果：</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 1, y: 2 &#125; 1 2</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 6, y: 9 &#125; 6 9</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 5, y: 7 &#125; 5 7</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 8, y: 3 &#125; 8 3</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考来源\"><a class=\"markdownIt-Anchor\" href=\"#参考来源\">#</a> 参考来源</h2>\n<ol>\n<li><a href=\"https://www.runoob.com/\">https://www.runoob.com/</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?src=11&amp;timestamp=1610508954&amp;ver=2825&amp;signature=MuT3T\">https://mp.weixin.qq.com/s?src=11&amp;timestamp=1610508954&amp;ver=2825&amp;signature=MuT3T</a><em>76</em>THSu0W8eqIwpy53lEn7LhmomX4g2GiW5<em>Cru01QsvR59tSuGT</em>IegVDMJl9ZtsgkEbE6gJf3Byjp7AelMmVLmupNuiG68X1tNaVQ9y*EZ6cRliWODj91Req&amp;new=1</li>\n</ol>\n<hr>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/380508881e3642849ec0ea8fd88ec6e0~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<blockquote>\n<p>如果喜欢我的文章请 &quot; <strong>点赞</strong> &quot; &quot; <strong>评论</strong> &quot; &quot; <strong>关注</strong> ，大家的支持就是我坚持下去的动力！若是以上内容有任何错误或者不准确的地方，欢迎留言指出，若你有更好的想法，也欢迎一起交流学习！</p>\n</blockquote>\n",
            "tags": [
                "数组"
            ]
        }
    ]
}