<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>星语の博客</title>
        <link>https://ttt2021.github.io</link>
        <description></description>
        <language>zh-CH</language>
        <pubDate>Thu, 01 Apr 2021 14:38:50 +0800</pubDate>
        <lastBuildDate>Thu, 01 Apr 2021 14:38:50 +0800</lastBuildDate>
        <category>javascript</category>
        <item>
            <guid isPermalink="true">https://ttt2021.github.io/posts/e8f85541/</guid>
            <title>原型与原型链</title>
            <link>https://ttt2021.github.io/posts/e8f85541/</link>
            <category>javascript</category>
            <pubDate>Thu, 01 Apr 2021 14:38:50 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/21784b9fef384458ba78342ddd3312a3~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;         在 JavaScript 中，原型和原型链是不可避免的重要概念，那么怎么去理解原型和原型链呢？下面是我对原型和原型链的理解和总结。也许有些理解还比较浅薄，随着时间的推移和理解的深入，以后还会补充。如果大家发现我理解的有问题，欢迎大家在评论中指正。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1-为什么-javascript-设计为基于原型的模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-为什么-javascript-设计为基于原型的模式&#34;&gt;#&lt;/a&gt; 1. 为什么 javaScript 设计为基于原型的模式&lt;/h2&gt;
&lt;p&gt;  在以往的学习过程中，我们曾通过学习面向对象语言 java 了解到其有三大特性：封装、继承、多态。关于继承，java 与 javascript 其实两者并不完全一样。&lt;/br&gt;  &lt;br&gt;
那么 javascript 到底是如何设计出来的呢？早期，浏览器只能浏览网页内容，而不能进行用户交互，也就说当我们输入账号密码进行登录时，浏览器不能对其输入内容进行判断，需要通过服务器进行判断，而网景公司为了解决这一问题，发明一种与 java 搭配使用的辅助脚本语言，并在语法上有些类似。由此可以看出，javascript 受到 java 的影响，其都是对象类型，有对象则就会涉及到继承机制，那么 JS 的继承机制是怎么样呢？&lt;/br&gt;  JS 参考 java 的设计，使用 new 操作符生成对象，但其与 java 不同的是 new 后面跟的是 Construtor 而不是 Class 。&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; java 中生成一个对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Person p &amp;#x3D; new Person() &amp;#x2F;&amp;#x2F; Person 指的是类名&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; js 生成一个对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function Person (age) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    this.age &amp;#x3D; age&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    this.nation &amp;#x3D; &amp;#39;China&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var father &amp;#x3D; new Person(42) &amp;#x2F;&amp;#x2F; Person 指的是构造函数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var mingming &amp;#x3D; new Person(11)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#96;&amp;#96;&amp;#96;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;## 2. 构造函数 Constructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;构造函数也是普通函数，其也有 prototype 属性，与普通函数的区别是其要求首字母大写。若构造函数使用new操作符调用时，其需要执行四个步骤：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;&amp;#x2F;br&amp;gt;&amp;amp;emsp;&amp;amp;emsp;1. 创建一个新的对象&amp;lt;&amp;#x2F;br&amp;gt;&amp;amp;emsp;&amp;amp;emsp;2. 将 this 指向这个新的对象&amp;lt;&amp;#x2F;br&amp;gt;&amp;amp;emsp;&amp;amp;emsp;3. 执行构造函数，给新对象添加属性和方法&amp;lt;&amp;#x2F;br&amp;gt;&amp;amp;emsp;&amp;amp;emsp;4. 返回这个新对象&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;function Food (name) {&lt;br&gt;
&lt;a href=&#34;http://this.name&#34;&gt;this.name&lt;/a&gt; = name&lt;br&gt;
this.eat = function () {&lt;br&gt;
console.log(‘eat’)&lt;br&gt;
}&lt;br&gt;
}&lt;br&gt;
var food = new Food(‘banana’)&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;## 3. 原型 prototype&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;amp;emsp;&amp;amp;emsp;任何一个函数都有一个 prototype 属性，它指向 prototype 对象。那么原型其实就是一个对象，在原型上定义的属性，通过继承（new 操作符实现），实例化的对象也拥有了该属性。&amp;lt;&amp;#x2F;br&amp;gt;&amp;amp;emsp;&amp;amp;emsp;原型与构造函数的关系：构造函数内有一个 prototype 属性，通过该属性可以访问到原型。 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;![](https:&amp;#x2F;&amp;#x2F;p1-juejin.byteimg.com&amp;#x2F;tos-cn-i-k3u1fbpfcp&amp;#x2F;38dae607b889448282019a8edfe135b5~tplv-k3u1fbpfcp-watermark.image)  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;以构造函数中的代码为例，Food 就是构造函数，Food.prototype 就是原型，food 就是参照 Food.prototype 生成的一个对象。 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;![](https:&amp;#x2F;&amp;#x2F;p6-juejin.byteimg.com&amp;#x2F;tos-cn-i-k3u1fbpfcp&amp;#x2F;f867b69c971e4076b3eb2437fca50d00~tplv-k3u1fbpfcp-watermark.image)  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;## 4. 实例 instance&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp; 实例就是通过构造函数创建出来的对象，在使用new操作符时，将构造函数的原型对象赋值给实例的 proto 属性。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;![](https:&amp;#x2F;&amp;#x2F;p9-juejin.byteimg.com&amp;#x2F;tos-cn-i-k3u1fbpfcp&amp;#x2F;7390d10af98749e284510e5c4f4b9665~tplv-k3u1fbpfcp-watermark.image)  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp; 简单来说，我们使用 new 操作符创建一个 food 实例，并且可以通过 instanceof 检验实例与构造函数之间的关系。  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;function Food (name) {&lt;br&gt;
&lt;a href=&#34;http://this.name&#34;&gt;this.name&lt;/a&gt; = name&lt;br&gt;
this.eat = function () {&lt;br&gt;
console.log(‘eat’)&lt;br&gt;
}&lt;br&gt;
}&lt;br&gt;
 var food = new Food (‘banana’)  // 实例化&lt;br&gt;
 var res = food instanceof Food // 检查 food 是否为 Food 实例&lt;br&gt;
 console.log (res) //true&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp; 当我们在原型上定义一个属性时，该属性也会赋值给实例。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;function Food (name) {&lt;br&gt;
&lt;a href=&#34;http://this.name&#34;&gt;this.name&lt;/a&gt; = name&lt;br&gt;
this.eat = function () {&lt;br&gt;
console.log(‘eat’)&lt;br&gt;
}&lt;br&gt;
}&lt;br&gt;
 var food = new Food (‘banana’)  // 实例化&lt;br&gt;
 var res = food instanceof Food // 检查 food 是否为 Food 实例&lt;br&gt;
 console.log (res) //true&lt;/p&gt;
&lt;p&gt;// 原型定义属性&lt;br&gt;
 Food.prototype.type = ‘object named Food’&lt;br&gt;
var foodRes = food.type// 实例继承的属性&lt;br&gt;
 console.log (foodRes) //object named Food&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;## 5. 隐式原型 ____proto____&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;任何对象在创建时都会有一个 ____proto____ 属性，它指向产生当前对象的构造函数的原型对象。由于该属性并非标准规定的属性，所以不要随便去更改该属性的值，以免破坏原型链。也就是说，实例可以通过 ____proto____ 属性访问到原型。  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;![](https:&amp;#x2F;&amp;#x2F;p6-juejin.byteimg.com&amp;#x2F;tos-cn-i-k3u1fbpfcp&amp;#x2F;bf2b5915f98a402d9f7ab5687a1ce3dc~tplv-k3u1fbpfcp-watermark.image) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;对象中的 ____proto____ 属性在所有实现中是无法访问到的，但是可以通过 isPrototypeOf() 方法来确定对象之间是否存在着这种关系。  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;function Food (name) {&lt;br&gt;
&lt;a href=&#34;http://this.name&#34;&gt;this.name&lt;/a&gt; = name&lt;br&gt;
this.eat = function () {&lt;br&gt;
console.log(‘eat’)&lt;br&gt;
}&lt;br&gt;
}&lt;br&gt;
 var food = new Food (‘banana’)  // 实例化&lt;br&gt;
 console.log (food.&lt;strong&gt;proto&lt;/strong&gt; === Food.prototype) // true&lt;br&gt;
console.log(Food.prototype.isPrototypeOf(food)) // true&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;## 6. 构造函数 constructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;构造函数可以通过 prototype 属性访问到原型，那么原型也是能够通过某种途径访问到构造函数的，其就是原型中的一个属性 constructor ，该属性并不是真正的构造函数，真正的构造函数是指 Constructor，两者不要混淆了。  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;function Food (name) {&lt;br&gt;
&lt;a href=&#34;http://this.name&#34;&gt;this.name&lt;/a&gt; = name&lt;br&gt;
this.eat = function () {&lt;br&gt;
console.log(‘eat’)&lt;br&gt;
}&lt;br&gt;
}&lt;br&gt;
var food = new Food(‘banana’)&lt;br&gt;
console.log(Food.prototype.constructor === Food) //true&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;![](https:&amp;#x2F;&amp;#x2F;p6-juejin.byteimg.com&amp;#x2F;tos-cn-i-k3u1fbpfcp&amp;#x2F;446ece5821ab449a828e66a3b514f2cc~tplv-k3u1fbpfcp-watermark.image)  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;**关键：prototype 的 constructor 指向构造函数本身**    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;那么构造函数、原型、实例三者的关系应该是这样的：    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;![](https:&amp;#x2F;&amp;#x2F;p1-juejin.byteimg.com&amp;#x2F;tos-cn-i-k3u1fbpfcp&amp;#x2F;ad9454aeb72a4f8985786bbb30bf24f7~tplv-k3u1fbpfcp-watermark.image)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;amp;emsp;&amp;amp;emsp; 为了更好地理解这一过程，我通过一个故事给大家梳理一下：&amp;lt;&amp;#x2F;br&amp;gt;&amp;amp;emsp;&amp;amp;emsp;1. 很久以前，有个雕刻家偶然看到一个很精致的花瓶（原型 Food.prototype)&amp;lt;&amp;#x2F;br&amp;gt;&amp;amp;emsp;&amp;amp;emsp;2. 一天，他想通过大批生产复刻这个花瓶来发家致富，于是他先分析这个花瓶，还原了雕刻的过程，并设计出了一条生产线（构造器 Food）  &amp;lt;&amp;#x2F;br&amp;gt;&amp;amp;emsp;&amp;amp;emsp;3. 然后通过这条生产线，雕刻出许许多多的复刻花瓶。（实例 food）  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;## 7. 原型链&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;proto 是任何对象都有的属性，在js中会形成一条 proto 连接起来的链条，递归访问 proto 直到值为 null ，这个搜索过程形成的链状关系就是原型链。  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;function Food (name) {&lt;br&gt;
&lt;a href=&#34;http://this.name&#34;&gt;this.name&lt;/a&gt; = name&lt;br&gt;
this.eat = function () {&lt;br&gt;
console.log(‘eat’)&lt;br&gt;
}&lt;br&gt;
}&lt;br&gt;
 var food = new Food (‘banana’)  // 实例化&lt;br&gt;
 // 原型链&lt;br&gt;
 console.log (food.&lt;strong&gt;proto&lt;/strong&gt;) // Food {}&lt;br&gt;
console.log(food.&lt;strong&gt;proto&lt;/strong&gt;.&lt;strong&gt;proto&lt;/strong&gt;) // {}&lt;br&gt;
console.log(food.&lt;strong&gt;proto&lt;/strong&gt;.&lt;strong&gt;proto&lt;/strong&gt;.&lt;strong&gt;proto&lt;/strong&gt;) // null&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;如下图：  

![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a0f18a4cae1f4a58a532f3e1b233c491~tplv-k3u1fbpfcp-watermark.image)  

## 总结
&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;1. 每创建一个函数都会有一个 prototype 属性，该属性是一个指针，指向一个对象，该对象为原型对象 (Food.prototype)。&amp;lt;/br&amp;gt;&amp;amp;emsp;&amp;amp;emsp;2. 原型对象上的默认属性 constructor 也是一个指针，指向其相关的构造函数。&amp;lt;/br&amp;gt;&amp;amp;emsp;&amp;amp;emsp;3. 通过 new 操作符产生的实例对象都会有一个内部属性指向原型对象，该实例对象可以访问原型对象上的所有属性和方法。&amp;lt;/br&amp;gt;&amp;amp;emsp;&amp;amp;emsp;4. 实例可以通过内部指针访问到原型对象，原型对象也可以通过 constructor 找到构造函数。&amp;lt;/br&amp;gt;&amp;amp;emsp;&amp;amp;emsp;5. 每个构造函数都有一个原型对象，原型对象上包含一个指向构造函数的指针，实例包含一个指向原型对象的内部指针。&amp;lt;/br&amp;gt;&amp;amp;emsp;&amp;amp;emsp;6. ____proto_____ 的指向取决于对象创建时的实现方式。&amp;lt;/br&amp;gt;&amp;amp;emsp;&amp;amp;emsp;7. 构造函数实例，封装的函数，如果通过 new 操作符来调用则是构造函数，否则则不是。&amp;lt;/br&amp;gt;&amp;amp;emsp;&amp;amp;emsp;8. 在整个原型链上寻找某个属性，对性能有影响，越是上层的原型对象，对性能的影响越大。&amp;lt;/br&amp;gt;&amp;amp;emsp;&amp;amp;emsp;9. js中一切皆对象，通过 new Function 的是函数对象，其构造函数是 Function，而普通对象的构造函数则是 Object 。&amp;lt;/br&amp;gt;&amp;amp;emsp;&amp;amp;emsp;10. 每一个对象都有 ____proto____ 属性，而每一个函数对象才有 prototype 属性。  

#### 参考来源
----------------------------------------
《JavaScript 高级程序设计》  

#### 最后
&amp;gt; &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;如果你仔细阅读完本文，相信你对 JavaScript 中的原型和原型链会有新的认识。如果你觉得对你有帮助，记得 **点赞** 哦！如果你发现我理解的有问题，也欢迎你在评论中指正出来。&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
    </channel>
</rss>
