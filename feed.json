{
    "version": "https://jsonfeed.org/version/1",
    "title": "星语の博客",
    "description": "",
    "home_page_url": "https://ttt2021.github.io",
    "items": [
        {
            "id": "https://ttt2021.github.io/posts/c1d0a512/",
            "url": "https://ttt2021.github.io/posts/c1d0a512/",
            "title": "数据结构与算法之数组",
            "date_published": "2021-05-15T12:24:52.968Z",
            "content_html": "<h2 id=\"什么是数组\"><a class=\"markdownIt-Anchor\" href=\"#什么是数组\">#</a> 什么是数组</h2>\n<p>  (1) 数组是一种线性表数据结构。<br>\n  线性表：数据排成像一条线一样的结构 数据最多只有前和后两个方向，如数组、链表、队列、栈采用的就是线性表。<br>\n  线性表：数非线性表：数据之间并不是简单的前后关系，如二叉树、堆、图采用的就是非线性表。<br>\n  (2) 用一组连续的内存空间来存储一组具有相同类型的数据。<p></p>\n<h2 id=\"为什么在大多数编程语言中数组要从0开始编码而不是从1开始呢\"><a class=\"markdownIt-Anchor\" href=\"#为什么在大多数编程语言中数组要从0开始编码而不是从1开始呢\">#</a> 为什么在大多数编程语言中，数组要从 0 开始编码，而不是从 1 开始呢？</h2>\n<p>  (1) 从数组存储的内存模型上来看，数组的下标应该是指偏移，如果用 a 来表示数组的首地址，a [0] 就是偏移为 0 的位置，即首地址，a [k] 就是偏移 k 个 type_size 的位置，则计算 a [k] 的内存地址公式为：a [k]_address = base_address + k * type_size<br>\n  (2) 而数组若是从 1 开始计数，那么 a [k] 的内存地址计算公式则为：a [k]_address = base_address + k * type_size<br>\n  (3) 比较上述两个公式，从 1 开始计数的，每次随机访问数组元素都会多一次减法运算，即 CPU 就会多一次减法指令。而数组作为非常基础的数据结构，通过下标随机访问数组元素又是其非常基础的编程操作，因此其效率的优化就要尽可能做到极致，所以为了减少一次减法操作，数组选择了从 0 开始编号，而不是从 1 开始。<br>\n  (4) 数组从 0 开始编码也有一定的历史原因，作为编程语言的鼻祖 C 语言，其数组从 0 开始编码，其他语言如 java，仿 C 语言中数组的写法。</p>\n<h2 id=\"适合使用数组的场景\"><a class=\"markdownIt-Anchor\" href=\"#适合使用数组的场景\">#</a> 适合使用数组的场景</h2>\n<p>  (1) 如果特别关注性能或希望使用基本类型，可以选用数组。<br>\n  (2) 如果数据大小事先已知，且对数据的操作非常简单，可以直接使用数组。<br>\n  (3) 当要表示多维数组时，使用数组往往更直观。<br>\n  (4) 在业务开发时，直接使用容器更省时省力；在底层开发时，如开发网络框架、性能的优化，使用数组优于容器。</p>\n<h2 id=\"数组与链表的区别\"><a class=\"markdownIt-Anchor\" href=\"#数组与链表的区别\">#</a> 数组与链表的区别</h2>\n<p>  (1) 数组静态分配内存，链表动态分配内存。<br>\n  (2) 数组在内存中连续，链表不连续。<br>\n  (3) 数组元素在栈区，链表元素在堆区。<br>\n  (4) 数组利用下标定位，时间复杂度是 O (1)，链表定位元素时间复杂度是 O (n)。<br>\n  (5) 数组插入或删除元素的时间复杂度是 O (n)，链表插入或删除元素的时间复杂度是 O (1)。</p>\n<h2 id=\"js中的数组\"><a class=\"markdownIt-Anchor\" href=\"#js中的数组\">#</a> js 中的数组</h2>\n<p>  在 javascript 中，数组是一种特殊的对象。</p>\n<h3 id=\"数组的创建\"><a class=\"markdownIt-Anchor\" href=\"#数组的创建\">#</a> 数组的创建</h3>\n<p>  在 javascript 中，数组的创建有两种方式。<br>\n  (1) 字面量方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const nums &#x3D; [1, 5, 6, 9]</span><br><span class=\"line\">console.log(nums, nums.length) &#x2F;&#x2F; [ 1, 5, 6, 9 ] 4</span><br></pre></td></tr></table></figure>\n<p>  (2) 构造函数方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; new Array(1, 5, 6, 9)</span><br><span class=\"line\">console.log(nums, nums.length) &#x2F;&#x2F; [ 1, 5, 6, 9 ] 4</span><br></pre></td></tr></table></figure>\n<p>  在 js 中，数组的数据可以是不同类型的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; [1, &#39;Jane&#39;, true, null]</span><br><span class=\"line\">console.log(nums, nums.length) &#x2F;&#x2F; [ 1, &#39;Jane&#39;, true, null ] 4</span><br></pre></td></tr></table></figure>\n<p>  可以通过 Array.isArray () 判断一个对象是否是数组。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; [1, 5, 6, 9]</span><br><span class=\"line\">console.log(Array.isArray(nums)) &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组的读写\"><a class=\"markdownIt-Anchor\" href=\"#数组的读写\">#</a> 数组的读写</h3>\n<p>  数组的读写采用循环遍历的方式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; [1, 5, 6, 9]</span><br><span class=\"line\">for (let i &#x3D; 0; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">  console.log(nums[i])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; 结果：</span><br><span class=\"line\">&#x2F;&#x2F; 1</span><br><span class=\"line\">&#x2F;&#x2F; 5</span><br><span class=\"line\">&#x2F;&#x2F; 6</span><br><span class=\"line\">&#x2F;&#x2F; 9</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组的深拷贝与浅拷贝\"><a class=\"markdownIt-Anchor\" href=\"#数组的深拷贝与浅拷贝\">#</a> 数组的深拷贝与浅拷贝</h3>\n<p>  (1) 浅复制：将数组赋给另一个数组，当改变其中一个数组的值时，另一个数组也会随之改变。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; [1, 2, 3, 4, 5, 6]</span><br><span class=\"line\">let newNums &#x3D; nums</span><br><span class=\"line\">nums[0] &#x3D; 9</span><br><span class=\"line\">console.log(nums, newNums) &#x2F;&#x2F; [ 9, 2, 3, 4, 5, 6 ] [ 9, 2, 3, 4, 5, 6 ]</span><br></pre></td></tr></table></figure>\n<p>  (2) 深复制：不改变原来的数组是情况下去创建一个新的数组。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; [1, 2, 3, 4, 5, 6]</span><br><span class=\"line\">let newNums &#x3D; []</span><br><span class=\"line\">for (let i &#x3D; 0; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">  newNums[i] &#x3D; nums[i]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">nums[0] &#x3D; 9</span><br><span class=\"line\">console.log(nums, newNums) &#x2F;&#x2F; [ 9, 2, 3, 4, 5, 6 ] [ 1, 2, 3, 4, 5, 6 ]</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组的存取函数\"><a class=\"markdownIt-Anchor\" href=\"#数组的存取函数\">#</a> 数组的存取函数</h3>\n<p>  (1) indexOf ()：返回指定查找的值在目标值中是否存在，若存在，返回该值在数组中的索引，若不存在则返回 - 1。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let words &#x3D; [&#39;q&#39;, &#39;w&#39;, &#39;e&#39;, &#39;r&#39;, &#39;t&#39;]</span><br><span class=\"line\">console.log(words.indexOf(&#39;w&#39;)) &#x2F;&#x2F; 1</span><br><span class=\"line\">console.log(words.indexOf(&#39;p&#39;)) &#x2F;&#x2F; -1</span><br></pre></td></tr></table></figure>\n<p>  (2) join () 与 toString ()<br>\n  两者都可以将数组转成字符串，但 join () 还可以以某种形式将数组转成字符串。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let words &#x3D; [&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;]</span><br><span class=\"line\">console.log(words.join()) &#x2F;&#x2F; h,e,l,l,o</span><br><span class=\"line\">console.log(words.join(&#39;&#39;)) &#x2F;&#x2F; hello</span><br><span class=\"line\">console.log(words.toString()) &#x2F;&#x2F; h,e,l,l,o</span><br></pre></td></tr></table></figure>\n<p>  (3) concat () 与 splice ()<br>\n  两者都是通过已有数组创建新的数组，但 concat () 是通过合并多个数组来形成新的数组，而 splice () 则是截取一个数组的子集作为一个新的数组。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const arr1 &#x3D; [&#39;hello&#39;, &#39;hi&#39;, &#39;get&#39;, &#39;milk&#39;]</span><br><span class=\"line\">const arr2 &#x3D; [&#39;apple&#39;, &#39;banana&#39;, &#39;pear&#39;]</span><br><span class=\"line\">let arr &#x3D; arr1.concat(arr2)</span><br><span class=\"line\">console.log(arr) &#x2F;&#x2F; [ &#39;hello&#39;, &#39;hi&#39;, &#39;get&#39;, &#39;milk&#39;, &#39;apple&#39;, &#39;banana&#39;, &#39;pear&#39; ]</span><br><span class=\"line\">const nums &#x3D; [1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class=\"line\">let newNums &#x3D; nums.splice(3, 2) &#x2F;&#x2F; 3 表示索引，2 表示删除的个数</span><br><span class=\"line\">console.log(newNums, nums) &#x2F;&#x2F; [ 4, 5 ] [ 1, 2, 3, 6, 7, 8, 9 ]</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组的可变函数\"><a class=\"markdownIt-Anchor\" href=\"#数组的可变函数\">#</a> 数组的可变函数</h3>\n<p>  可变函数：不去引用数组中的某个元素就能改变数组的内容。<br>\n  (1) push ()、unshift ()、pop () 与 shift ()<br>\n  push ()：在数组末尾添加元素<br>\n  unshift ()：在数组开头添加元素<br>\n  pop ()：删除数组末尾的元素<br>\n  shift ()：删除数组的第一个元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; [7, 23, 15, 61, 39]</span><br><span class=\"line\">nums.push(53)</span><br><span class=\"line\">console.log(nums) &#x2F;&#x2F; [ 7, 23, 15, 61, 39, 53 ]</span><br><span class=\"line\">nums.unshift(20)</span><br><span class=\"line\">console.log(nums) &#x2F;&#x2F; [ 20,  7, 23, 15, 61, 39, 53 ]</span><br><span class=\"line\">nums.pop()</span><br><span class=\"line\">console.log(nums) &#x2F;&#x2F; [ 20, 7, 23, 15, 61, 39 ]</span><br><span class=\"line\">nums.shift()</span><br><span class=\"line\">console.log(nums) &#x2F;&#x2F; [ 7, 23, 15, 61, 39 ] </span><br></pre></td></tr></table></figure>\n<p>  (2) splice ()、sort () 与 reverse ()<br>\n  splice ()：不仅可以用来删除元素，还可以用来添加元素<br>\n  sort ()：以 ascii 码的大小进行排序，因而数字排列不准确，但可以自定义排序规则<br>\n  reverse ()：将数组内的元素翻转</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; [51, 29, 43, 17, 21, 8]</span><br><span class=\"line\">nums.splice(3, 0, 65) &#x2F;&#x2F; 2 表示索引，0 表示不删除元素，65表示往数组中添加的元素</span><br><span class=\"line\">console.log(nums) &#x2F;&#x2F; [ 51, 29, 43, 65, 17, 21, 8 ]</span><br><span class=\"line\">nums.sort()</span><br><span class=\"line\">console.log(nums) &#x2F;&#x2F; [ 17, 21, 29, 43, 51, 65, 8 ] 不准确</span><br><span class=\"line\">console.log(nums.reverse()) &#x2F;&#x2F; [ 8, 65, 51, 43, 29, 21, 17 ]</span><br><span class=\"line\">let words &#x3D; [&#39;hello&#39;, &#39;hi&#39;, &#39;get&#39;, &#39;milk&#39;]</span><br><span class=\"line\">console.log(words.sort()) &#x2F;&#x2F; [ &#39;get&#39;, &#39;hello&#39;, &#39;hi&#39;, &#39;milk&#39; ] 按字母a-z排列</span><br><span class=\"line\">&#x2F;&#x2F; 若使用排序时要想避免数字排序不准确的问题就需要在调用sort()时传入一个函数，该函数可以比较出大小</span><br><span class=\"line\">nums.sort((a, b) &#x3D;&gt; &#123; &#x2F;&#x2F; 从小到大排序</span><br><span class=\"line\">  return a - b &#x2F;&#x2F; 两数相减，若结果为正，被减数大于减数，若结果为0，两数相等，若结果为负，被减数小于减数</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(nums) &#x2F;&#x2F; [ 8, 17, 21, 29, 43, 51, 65 ]</span><br></pre></td></tr></table></figure>\n<h3 id=\"迭代器方法\"><a class=\"markdownIt-Anchor\" href=\"#迭代器方法\">#</a> 迭代器方法</h3>\n<h4 id=\"不返回新数组\"><a class=\"markdownIt-Anchor\" href=\"#不返回新数组\">#</a> 不返回新数组</h4>\n<p>  (1) forEach ()：遍历数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; [1, 2, 3, 4, 5, 6]</span><br><span class=\"line\">nums.forEach(function(item) &#123;</span><br><span class=\"line\">  console.log(item, item * item)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#x2F;&#x2F; 结果：</span><br><span class=\"line\">&#x2F;&#x2F; 1 1</span><br><span class=\"line\">&#x2F;&#x2F; 2 4</span><br><span class=\"line\">&#x2F;&#x2F; 3 9</span><br><span class=\"line\">&#x2F;&#x2F; 4 16</span><br><span class=\"line\">&#x2F;&#x2F; 5 25</span><br><span class=\"line\">&#x2F;&#x2F; 6 36</span><br></pre></td></tr></table></figure>\n<p>  (2) every ()：返回 Boolean 类型，对于应用的所有元素，返回 true</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; [1, 3, 5, 7]</span><br><span class=\"line\">function isOdd(num) &#123;</span><br><span class=\"line\">  console.log(num)</span><br><span class=\"line\">  return num % 2 !&#x3D;&#x3D; 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; console.log(nums.every(isOdd))</span><br><span class=\"line\">&#x2F;&#x2F; 结果：</span><br><span class=\"line\">&#x2F;&#x2F; 1</span><br><span class=\"line\">&#x2F;&#x2F; 3</span><br><span class=\"line\">&#x2F;&#x2F; 5</span><br><span class=\"line\">&#x2F;&#x2F; 7</span><br><span class=\"line\">&#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>\n<p>  (3) some ()：与 every () 不同的是只要有一个元素使该函数返回 true，那么就返回 true</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; [1, 3, 5, 7]</span><br><span class=\"line\">function isOdd(num) &#123;</span><br><span class=\"line\">  console.log(num)</span><br><span class=\"line\">  return num % 2 !&#x3D;&#x3D; 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(nums.some(isOdd))</span><br><span class=\"line\">&#x2F;&#x2F; 结果：</span><br><span class=\"line\">&#x2F;&#x2F; 1</span><br><span class=\"line\">&#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>\n<p>  (4) reduce ()：既可以对数组元素进行求和，也可以将数组元素连接成字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; [1, 2, 3, 4, 5]</span><br><span class=\"line\">let sum &#x3D; nums.reduce((a, b) &#x3D;&gt; &#123;</span><br><span class=\"line\">  return a + b</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(sum) &#x2F;&#x2F; 15</span><br><span class=\"line\">let words &#x3D; [&#39;I &#39;, &#39;like &#39;, &#39;china&#39;]</span><br><span class=\"line\">let str &#x3D; words.reduce((item, i) &#x3D;&gt; &#123;</span><br><span class=\"line\">  return item + i</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(str) &#x2F;&#x2F; I like china</span><br></pre></td></tr></table></figure>\n<h4 id=\"返回新数组\"><a class=\"markdownIt-Anchor\" href=\"#返回新数组\">#</a> 返回新数组</h4>\n<p>  (1) map ()：与 forEach 一样，但 map () 返回的是一个新数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; [52, 16, 87, 63, 29]</span><br><span class=\"line\">let result &#x3D; nums.map(item &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(item)</span><br><span class=\"line\">  return item +&#x3D; 5</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(result)</span><br><span class=\"line\">&#x2F;&#x2F; 结果：</span><br><span class=\"line\">&#x2F;&#x2F; 52</span><br><span class=\"line\">&#x2F;&#x2F; 16</span><br><span class=\"line\">&#x2F;&#x2F; 87</span><br><span class=\"line\">&#x2F;&#x2F; 63</span><br><span class=\"line\">&#x2F;&#x2F; 29</span><br><span class=\"line\">&#x2F;&#x2F; [ 57, 21, 92, 68, 34 ]</span><br></pre></td></tr></table></figure>\n<p>  (2) filter：与 every 相似，区别在于当所有元素使该函数为 true 时，它返回的是一个新的数组，而不是 Boolean 类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; []</span><br><span class=\"line\">for (let i &#x3D; 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">  nums[i] &#x3D; Math.floor(Math.random() * 101)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let result &#x3D; nums.filter(item &#x3D;&gt; item &gt;&#x3D; 60)</span><br><span class=\"line\">console.log(nums, result) &#x2F;&#x2F; [ 5, 18, 33, 74, 6, 69, 79, 78, 61, 93 ] [ 74, 69, 79, 78, 61, 93 ]</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组的其他常用方法\"><a class=\"markdownIt-Anchor\" href=\"#数组的其他常用方法\">#</a> 数组的其他常用方法</h3>\n<p>  (1) indexOf () 与 lastIndexOf ()<br>\n  indexOf ()：返回返回调用 String 对象中第一次出现的指定值的索引，若不存在则返回 - 1<br>\n  lastIndexOf ()：返回指定元素在数组中的最后一个的索引，如果不存在则返回 - 1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; [2, 5, 8, 6, 7]</span><br><span class=\"line\">console.log(nums.indexOf(3)) &#x2F;&#x2F; -1</span><br><span class=\"line\">console.log(nums.indexOf(6)) &#x2F;&#x2F; 3</span><br><span class=\"line\">console.log(nums.lastIndexOf(5)) &#x2F;&#x2F; 1</span><br><span class=\"line\">console.log(nums.lastIndexOf(1)) &#x2F;&#x2F; -1</span><br></pre></td></tr></table></figure>\n<p>  (2) includes ()：用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回 false</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; [1, 2, 3, 4, 5, NaN]</span><br><span class=\"line\">console.log(nums.includes(2)) &#x2F;&#x2F; true</span><br><span class=\"line\">console.log(nums.includes(6)) &#x2F;&#x2F; false</span><br><span class=\"line\">console.log(nums.includes(3, 3)) &#x2F;&#x2F; false</span><br><span class=\"line\">console.log(nums.includes(4, -1)) &#x2F;&#x2F; false</span><br><span class=\"line\">console.log(nums.includes(NaN)) &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>\n<p>  (3) fill ()：用一个固定值填充一个数组中从起始索引到终止索引内的全部元素，但不包括终止索引</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; [1, 2, 3, 4, 5];</span><br><span class=\"line\">nums &#x3D; new Array(nums.length).fill(0);</span><br><span class=\"line\">console.log(nums) &#x2F;&#x2F; [ 0, 0, 0, 0, 0 ]</span><br></pre></td></tr></table></figure>\n<p>  (4) find () 与 findIndex ()<br>\n  find ()：返回数组中满足提供的测试函数的第一个元素的值，否则返回 undefined</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fruits &#x3D; [</span><br><span class=\"line\">  &#123;name: &#39;apples&#39;, quantity: 3&#125;,</span><br><span class=\"line\">  &#123;name: &#39;bananas&#39;, quantity: 2&#125;,</span><br><span class=\"line\">  &#123;name: &#39;pears&#39;, quantity: 5&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">function findBananas(fruit) &#123; </span><br><span class=\"line\">  return fruit.name &#x3D;&#x3D;&#x3D; &#39;bananas&#39;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(fruits.find(findBananas)) &#x2F;&#x2F; &#123; name: &#39;bananas&#39;, quantity: 2 &#125;</span><br></pre></td></tr></table></figure>\n<p>  findIndex ()：返回数组中满足提供的测试函数的第一个元素的索引，否则返回 - 1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const grades &#x3D; [45, 68, 76, 31, 93];</span><br><span class=\"line\"></span><br><span class=\"line\">function isPass(grade) &#123;</span><br><span class=\"line\">  return grade &gt;&#x3D; 60;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(grades.findIndex(isPass)) &#x2F;&#x2F; 1</span><br></pre></td></tr></table></figure>\n<h3 id=\"二维数组\"><a class=\"markdownIt-Anchor\" href=\"#二维数组\">#</a> 二维数组</h3>\n<h4 id=\"二维数组的创建\"><a class=\"markdownIt-Anchor\" href=\"#二维数组的创建\">#</a> 二维数组的创建</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; let nums &#x3D; [[1, 3, 5], [2, 9, 6]]</span><br><span class=\"line\">&#x2F;&#x2F; console.log(nums[1][2]) &#x2F;&#x2F; 6</span><br></pre></td></tr></table></figure>\n<h4 id=\"二维数组的访问\"><a class=\"markdownIt-Anchor\" href=\"#二维数组的访问\">#</a> 二维数组的访问</h4>\n<p>  (1) 按列访问<br>\n  内层循环行，内层循环列</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; [[1, 3, 5], [2, 9, 6]]</span><br><span class=\"line\">for (let i &#x3D; 0; i &lt; nums.length; i++) &#123; &#x2F;&#x2F; 行</span><br><span class=\"line\">  for (let j &#x3D; 0; j &lt; nums[i].length; j++) &#123; &#x2F;&#x2F; 列</span><br><span class=\"line\">    console.log(nums[i][j])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; 结果：</span><br><span class=\"line\">&#x2F;&#x2F; 1</span><br><span class=\"line\">&#x2F;&#x2F; 3</span><br><span class=\"line\">&#x2F;&#x2F; 5</span><br><span class=\"line\">&#x2F;&#x2F; 2</span><br><span class=\"line\">&#x2F;&#x2F; 9</span><br><span class=\"line\">&#x2F;&#x2F; 6</span><br></pre></td></tr></table></figure>\n<p>  (2) 按行访问<br>\n  内层循环列，内层循环行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nums &#x3D; [[1, 3, 5], [2, 9, 6]]</span><br><span class=\"line\">for (let i &#x3D; 0; i &lt; nums[0].length; i++) &#123; &#x2F;&#x2F; 行</span><br><span class=\"line\">  for (let j &#x3D; 0; j &lt; nums.length; j++) &#123; &#x2F;&#x2F; 列</span><br><span class=\"line\">    console.log(nums[j][i])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; 结果：</span><br><span class=\"line\">&#x2F;&#x2F; 1</span><br><span class=\"line\">&#x2F;&#x2F; 2</span><br><span class=\"line\">&#x2F;&#x2F; 3</span><br><span class=\"line\">&#x2F;&#x2F; 9</span><br><span class=\"line\">&#x2F;&#x2F; 5</span><br><span class=\"line\">&#x2F;&#x2F; 6</span><br></pre></td></tr></table></figure>\n<h3 id=\"对象数组\"><a class=\"markdownIt-Anchor\" href=\"#对象数组\">#</a> 对象数组</h3>\n<h4 id=\"对象数组的创建\"><a class=\"markdownIt-Anchor\" href=\"#对象数组的创建\">#</a> 对象数组的创建</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Point(x, y) &#123;</span><br><span class=\"line\">  this.x &#x3D; x</span><br><span class=\"line\">  this.y &#x3D; y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function show(arr) &#123;</span><br><span class=\"line\">  for (let i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    console.log(arr[i], arr[i].x, arr[i].y)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let p1 &#x3D; new Point(1, 2)</span><br><span class=\"line\">let p2 &#x3D; new Point(6, 9)</span><br><span class=\"line\">let p3 &#x3D; new Point(5, 7)</span><br><span class=\"line\">let p4 &#x3D; new Point(8, 3)</span><br><span class=\"line\"></span><br><span class=\"line\">let arr &#x3D; [p1, p2, p3, p4]</span><br><span class=\"line\">show(arr)</span><br><span class=\"line\">&#x2F;&#x2F; 结果：</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 1, y: 2 &#125; 1 2</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 6, y: 9 &#125; 6 9</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 5, y: 7 &#125; 5 7</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 8, y: 3 &#125; 8 3</span><br></pre></td></tr></table></figure>\n<h4 id=\"对象数组也可以使用数组的方法\"><a class=\"markdownIt-Anchor\" href=\"#对象数组也可以使用数组的方法\">#</a> 对象数组也可以使用数组的方法</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let p5 &#x3D; new Point(9, 4)</span><br><span class=\"line\">&#x2F;&#x2F; 末尾添加元素</span><br><span class=\"line\">arr.push(p5)</span><br><span class=\"line\">show(arr)</span><br><span class=\"line\">&#x2F;&#x2F; 结果：</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 1, y: 2 &#125; 1 2</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 6, y: 9 &#125; 6 9</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 5, y: 7 &#125; 5 7</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 8, y: 3 &#125; 8 3</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 9, y: 4 &#125; 9 4</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 头部添加元素</span><br><span class=\"line\">let p6 &#x3D; new Point(7, 2)</span><br><span class=\"line\">arr.unshift(p6)</span><br><span class=\"line\">show(arr)</span><br><span class=\"line\">&#x2F;&#x2F; 结果：</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 7, y: 2 &#125; 7 2</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 1, y: 2 &#125; 1 2</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 6, y: 9 &#125; 6 9</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 5, y: 7 &#125; 5 7</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 8, y: 3 &#125; 8 3</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 9, y: 4 &#125; 9 4</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 尾部删除元素</span><br><span class=\"line\">arr.pop()</span><br><span class=\"line\">show(arr)</span><br><span class=\"line\">&#x2F;&#x2F; 结果：</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 7, y: 2 &#125; 7 2</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 1, y: 2 &#125; 1 2</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 6, y: 9 &#125; 6 9</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 5, y: 7 &#125; 5 7</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 8, y: 3 &#125; 8 3</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 头部删除元素</span><br><span class=\"line\">arr.shift()</span><br><span class=\"line\">show(arr)</span><br><span class=\"line\">&#x2F;&#x2F; 结果：</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 1, y: 2 &#125; 1 2</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 6, y: 9 &#125; 6 9</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 5, y: 7 &#125; 5 7</span><br><span class=\"line\">&#x2F;&#x2F; Point &#123; x: 8, y: 3 &#125; 8 3</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考来源\"><a class=\"markdownIt-Anchor\" href=\"#参考来源\">#</a> 参考来源</h2>\n<ol>\n<li><a href=\"https://www.runoob.com/\">https://www.runoob.com/</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?src=11&amp;timestamp=1610508954&amp;ver=2825&amp;signature=MuT3T\">https://mp.weixin.qq.com/s?src=11&amp;timestamp=1610508954&amp;ver=2825&amp;signature=MuT3T</a><em>76</em>THSu0W8eqIwpy53lEn7LhmomX4g2GiW5<em>Cru01QsvR59tSuGT</em>IegVDMJl9ZtsgkEbE6gJf3Byjp7AelMmVLmupNuiG68X1tNaVQ9y*EZ6cRliWODj91Req&amp;new=1</li>\n</ol>\n<hr>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/380508881e3642849ec0ea8fd88ec6e0~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<blockquote>\n<p>如果喜欢我的文章请 &quot; <strong>点赞</strong> &quot; &quot; <strong>评论</strong> &quot; &quot; <strong>关注</strong> ，大家的支持就是我坚持下去的动力！若是以上内容有任何错误或者不准确的地方，欢迎留言指出，若你有更好的想法，也欢迎一起交流学习！</p>\n</blockquote>\n",
            "tags": [
                "数组"
            ]
        },
        {
            "id": "https://ttt2021.github.io/posts/61988d84/",
            "url": "https://ttt2021.github.io/posts/61988d84/",
            "title": "你不知道的冒泡排序优化",
            "date_published": "2021-05-15T08:33:21.111Z",
            "content_html": "<blockquote>\n<p>  什么是冒泡排序呢？冒泡排序其实就是一种基础的交换排序。它之所以被叫作冒泡排序是因为需要排序的每一个元素都可以像汽水中的小气泡一样，根据自身的大小，经由交换慢慢 “浮” 到数组的一侧。</p>\n</blockquote>\n<h2 id=\"算法思想\"><a class=\"markdownIt-Anchor\" href=\"#算法思想\">#</a> 算法思想</h2>\n<p>  以从左往右、从小到大为例</br>  (1) 从左往右依次比较相邻元素的大小，更大的元素交换到右侧。</br>  (2) 从第一组相邻元素比较到最后一组相邻元素，结束后最后一个元素则是参与比较的元素中的最大的元素。</br>  (3) 再重新从左往右依次比较相邻，但前一轮中得到的最后一个元素不参与比较，由此得到新一轮的最大元素。</br>  (4) 重复步骤 (3)，直到没有任何一组元素需要进行比较。<br/>  为了更形象地理解冒泡排序，我通过动画的形式给大家展示一下冒泡算法是如何具体的移动的呢？</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c197dad38b7a4fbf8c8345cf133f969e~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  有一个无序数组：3，44，38，5，47，15，36，26，27，希望从小到大排序。</br>  按照冒泡排序的思想，我们应该把相邻元素进行两两比较，根据其比较的大小来交换两者的位置，动画过程解释如下：</br>  首先让 3 和 44 进行比较，发现 3 比 44 小，因此元素位置不改变。</br>  接下来比较 44 和 38，发现 44 比 38 大，交换两者的位置。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/576ad3948bcb46f59874882bb4f67897~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  继续让 44 和 5 比较，发现 44 比 5 大，交换两者的位置。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e75e5e68b3bf42dab77935fd92e9b350~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  继续让 44 和 47 比较，发现 44 比 47 小，不交换位置。<br/>  接下来让 47 和 15 比较，发现 47 比 15 大，交换两者的位置。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c8b105492e3e45e59fa7eef7dab3815b~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  继续让 47 和 36 比较，发现 47 比 36 大，交换两者的位置。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/411ed090f8c04ef59bff8df1bcc2c288~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  继续让 47 和 26 比较，发现 47 比 26 大，交换两者的位置。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4e403d2cd337447588ffc6351fff2dff~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  最后让 47 和 27 比较，发现 47 比 27 大，交换两者的位置。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1cde206e63774a76ac48e768eacca7d4~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  这样一来，元素 47 作为数组的最大元素，就像生活中的汽水里的小气泡 &quot;沉在底部&quot;。<br/>  这时候，冒泡排序的第一轮就结束了，数列最右侧的元素 47 就可以认为是一个有序的区域，而这个有序的区域目前只有一个元素。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5fb1eccdd6a54189818125a5bec1abdc~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  下面，让我们来进行第二轮排序。<br/>  首先让 3 和 38 比较，发现 3 比 38 小，不交换位置。<br/>  接下来让 38 和 5 比较，发现 38 比 5 大，交换两者位置。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/89f25d0505814bc88bcbe383303069af~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  继续让 38 和 44 比较，发现 38 比 44 小，不交换位置。<br/>  接下来让 44 和 15 比较，发现 44 比 15 大，交换两者位置。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1ca151d9f06647ea8a97f01975168d92~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  继续让 44 和 36 比较，发现 44 比 36 大，交换两者位置。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3012787594694d41b7698e26bb78b8eb~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  继续让 44 和 26 比较，发现 44 比 26 大，交换两者位置。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/04081a292e734079a837ad88b6de8a55~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  继续让 44 和 27 比较，发现 44 比 27 大，交换两者位置。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9d206c719b8041848fe5e57af9d2ffe7~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  第二轮排序结束后，右侧的有序区有了两个元素。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/06337e6b51784e77867d24c132bcba67~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  依次类推，第三轮过后的结果为：</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d43917b7849d4f0ebb8975e4bc50b972~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  第四轮过后的结果是：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5489fe7dd1b64939934f64c54324f6b1~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  第五轮过后的结果是：</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7717c3def5c74d4684c1a85ef540b406~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  第六轮过后的结果是：</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/31c04e3f43824983b80c07b3894c0a7e~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  第七轮过后的结果是：</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6e7021bc4e7d48e8a11ca8041f67e53f~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  第八轮过后的结果是：</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b7c2c060999449a691721703001f9056~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  第九轮过后的结果是：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0ee702994ca746a192300856cddf7d07~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  由此，数组中所有元素都是有序的，这就是冒泡排序的整体思路。</p>\n<h2 id=\"实现\"><a class=\"markdownIt-Anchor\" href=\"#实现\">#</a> 实现</h2>\n<p>  遥远的 Arithmetic 星球，植根于算法文明。在追问门派，有这么一对师徒正在探讨如何能够更好地实现冒泡排序：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/adc7423a6987496887e90b5ac6c54914~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/383f63aefb4647f1b7a95c3713147f81~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  冒泡排序灯塔第一层：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bubbleSort &#x3D; function (arr) &#123;</span><br><span class=\"line\">    console.time(&#39;冒泡排序耗时&#39;)</span><br><span class=\"line\">    for (var i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        for (var j &#x3D; 0; j &lt; arr.length - i - 1; j++) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 比较相邻两个元素，进行交换</span><br><span class=\"line\">            if (arr[j] &gt; arr[j+1]) &#123;</span><br><span class=\"line\">                var temp &#x3D; arr[j]</span><br><span class=\"line\">                arr[j] &#x3D; arr[j+1]</span><br><span class=\"line\">                arr[j+1] &#x3D; temp</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            &#x2F;&#x2F; console.log(arr)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F; console.log(i, arr)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.timeEnd(&#39;冒泡排序耗时&#39;)</span><br><span class=\"line\">    return arr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var arr &#x3D; [3, 44, 38, 5, 47, 15, 36, 26, 27]</span><br><span class=\"line\">console.log(bubbleSort(arr))</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3aedd62a3e3c47fbbb6d54286532157e~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5dddfac06f194c6c808e437594f26b00~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8509f47643bf4ed0b9ebae32f01f0fb1~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6f6b3027175947eea6a2202dd66536f3~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/22e79b1414e845cf873cfe2e5e260574~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  冒泡排序灯塔第二层：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bubbleSortFlag &#x3D; function (arr) &#123;</span><br><span class=\"line\">    console.time(&#39;冒泡排序耗时&#39;)</span><br><span class=\"line\">    for (var i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        var flag &#x3D; true &#x2F;&#x2F; 设置每一轮是否进行了交换，默认未交换，即有序</span><br><span class=\"line\">        for (var j &#x3D; 0; j &lt; arr.length - i - 1; j++) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 比较相邻两个元素，进行交换</span><br><span class=\"line\">            if (arr[j] &gt; arr[j+1]) &#123;</span><br><span class=\"line\">                var temp &#x3D; arr[j]</span><br><span class=\"line\">                arr[j] &#x3D; arr[j+1]</span><br><span class=\"line\">                arr[j+1] &#x3D; temp</span><br><span class=\"line\">                flag &#x3D; false &#x2F;&#x2F; 有元素交换，无序</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            &#x2F;&#x2F; console.log(arr)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        console.log(i, arr)</span><br><span class=\"line\">        if (flag) break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.timeEnd(&#39;冒泡排序耗时&#39;)</span><br><span class=\"line\">    return arr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var arr &#x3D; [3, 44, 38, 5, 47, 15, 36, 26, 27]</span><br><span class=\"line\">console.log(bubbleSortFlag(arr))</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1cb5322839334413bece429d7f61f4d6~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/675c281fa6dc4edba346805d52c687df~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  有一个数组：3，5，2，4，1，6，7，8，9，该数组前半部分 (3，5，2，4，1) 是无序的，而后半部分 (6，7，8，9) 是有序的。其冒泡排序流程如下：<br/>  第一轮：<br/>  元素 3 和 5 比较，3 比 5 小，不交换位置。<br/>  元素 5 和 2 比较，5 比 2 大，交换两者位置。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3dc409c5079d49c5ace413302c6cbf12~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  元素 5 和 4 比较，5 比 4 大，交换两者位置。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3d8bdd2fb8c042f3b3354ffcf5ef5fe7~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  元素 5 和 1 比较，5 比 1 大，交换两者位置。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/20fb9a10025740bd91b9259eac93ed45~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  元素 5 和 6 比较，5 比 6 小，不交换位置。<br/>  元素 6 和 7 比较，6 比 7 小，不交换位置。<br/>  元素 7 和 8 比较，7 比 8 小，不交换位置。<br/>  元素 8 和 9 比较，8 比 9 小，不交换位置。<br/>  第一轮结束，数组有序区包含一个元素。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/482772a433bc499397fe5b983975e151~tplv-k3u1fbpfcp-watermark.image\" alt=\"\">  第二轮：<br/>  元素 3 和 2 比较，3 比 2 大，交换两者位置。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/15e52bc0565d46a2994b73970ad1d197~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  元素 3 和 4 比较，3 比 4 小，不交换位置。<br/>  元素 4 和 1 比较，4 比 1 大，交换两者位置。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c59fd1e68d3842a5bc0703cb0c1e5fb9~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  元素 4 和 5 比较，4 比 5 小，不交换位置。<br/>  元素 5 和 6 比较，5 比 6 小，不交换位置。<br/>  元素 6 和 7 比较，6 比 7 小，不交换位置。<br/>  元素 7 和 8 比较，7 比 8 小，不交换位置。<br/>  元素 8 和 9 比较，8 比 9 小，不交换位置。<br/>  第二轮结束，数组有序区包含两个元素。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5110116eb6064c8487db8317ab27fb1b~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  依次类推，第三轮结束，数组有序区包含三个元素。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f5bcdfff3d74435bb627fef8df428660~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  第四轮结束，数组有序区包含四个元素。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14b24dd21b0847f99be5a3f9a97ca878~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  第五轮结束，数组有序区包含五个元素。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1f0da38dbcfc47c4af368a642aea407b~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  第六轮结束，数组有序区包含六个元素。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0bca27f7ffb24e5abd2e87a020e8ad1a~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  第七轮结束，数组有序区包含七个元素。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e9d94234e99f4e86a7a9e5fcd7285742~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  第八轮结束，数组有序区包含八个元素。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/58d6bd2526a342cc84a5e80a3c6d3db4~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  第九轮结束，数组全部元素都属于有序区。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/99379f30d75849ef86e2f6e8c09a876f~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7aea479bc16c46d9a32125da7ee90970~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7826e11e7b774a4e87ab34fbc1a582da~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/20b216c3d3234d4d96138abb321905d7~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/53c01d0e08c243408dc0b7af61467480~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  冒泡排序灯塔第三层：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bubbleSortDic &#x3D; function (arr) &#123;</span><br><span class=\"line\">    var len &#x3D; arr.length - 1 </span><br><span class=\"line\">    var firstSwrapIndex &#x3D; 0  &#x2F;&#x2F; 设置最后交换元素的位置</span><br><span class=\"line\">    console.time(&#39;冒泡排序耗时&#39;)</span><br><span class=\"line\">    for (var i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        var flag &#x3D; true</span><br><span class=\"line\">        for (var j &#x3D; 0; j &lt; len; j++) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 比较相邻两个元素，进行交换</span><br><span class=\"line\">            if (arr[j] &gt; arr[j+1]) &#123;</span><br><span class=\"line\">                var temp &#x3D; arr[j]</span><br><span class=\"line\">                arr[j] &#x3D; arr[j+1]</span><br><span class=\"line\">                arr[j+1] &#x3D; temp</span><br><span class=\"line\">                flag &#x3D; false</span><br><span class=\"line\">                firstSwrapIndex &#x3D; j</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            &#x2F;&#x2F; console.log(arr)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        len &#x3D; firstSwrapIndex &#x2F;&#x2F; 最后一次交换的位置</span><br><span class=\"line\">        console.log(i, arr, len)</span><br><span class=\"line\">        if (flag) break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.timeEnd(&#39;冒泡排序耗时&#39;)</span><br><span class=\"line\">    return arr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var arr &#x3D; [3, 5, 2, 4, 1, 6, 7, 8, 9]</span><br><span class=\"line\">console.log(bubbleSortDic(arr))</span><br></pre></td></tr></table></figure>\n<h2 id=\"冒泡排序分析\"><a class=\"markdownIt-Anchor\" href=\"#冒泡排序分析\">#</a> 冒泡排序分析</h2>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bfa4ea735d644d1f8d6655d29006e947~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/51c83b3dcba54228841bbcbfa4dd120e~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/257a7920f41040319a494449c57e6f99~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b9b74afc4534c02ada6ca9362ba8e0f~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0a1171092e7b4cecb937eb24c2854c76~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2e6262093f9640fab15387d9fb7e40bc~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c96f264593848ada8ace8338ee11c99~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<h2 id=\"冒泡排序升级鸡尾酒排序\"><a class=\"markdownIt-Anchor\" href=\"#冒泡排序升级鸡尾酒排序\">#</a> 冒泡排序升级 —— 鸡尾酒排序</h2>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/729678729c5c44208e09a11bb6a0739f~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bedd89de0bbf4a48bed1a40c4f769386~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bd10664fa29c4310a1cbb4cefbaa3f68~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0f2e40b36f144ed78bac8c2f86906157~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2cbbd4610f1748b080b419151e655990~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1f4a0057124e4a4ba17369a02119ac16~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0f40779dfb974b49a5690ba9ba10d5ae~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a22405fe561748d28934300f649c5a01~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  有一个数组：15，9，18，6，12，23，2，32 29，其鸡尾酒排序过程如下：<br/>  第一轮，与冒泡排序一样操作，最后得到如下结果。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9eebfd13cdb243b3a8fb6e51d86c3674~tplv-k3u1fbpfcp-watermark.image\" alt=\"\">   第二轮开始不一样，它是从右往左进行比较和交换。<br>\n  首先元素 29 和 23 进行比较，发现 29 比 23 大，不交换位置。<br/>  然后元素 23 和 2 进行比较，发现 23 比 2 大，不交换位置。<br/>  接下来元素 2 和 18 进行比较，发现 2 比 18 小，交换两者位置。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4f0da10eb91f49de9080a728d064cf10~tplv-k3u1fbpfcp-watermark.image\" alt=\"\">  继续元素 2 和 12 进行比较，发现 2 比 12 小，交换两者位置。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ef07726c1b53404a9ecd064f03d91600~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  继续元素 2 和 6 进行比较，发现 2 比 6 小，交换两者位置。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0f2130ed85a44ba4bf541a23cd685c84~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  继续元素 2 和 15 进行比较，发现 2 比 15 小，交换两者位置。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/86b03ec0b79e458ca931bd184456b3a7~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  继续元素 2 和 9 进行比较，发现 2 比 9 小，交换两者位置。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5891cefa7fb24980b10f7f2b2e7ad46f~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  最终，第二轮结束后得到的结果如下：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/49dd804f77ee4eab82911333b33398eb~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  第三轮：<br>\n  首先比较元素 9 和 15，9 比 15 小，不交换位置。<br>\n  然后比较元素 15 和 6，15 比 6 大，交换两者位置。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd476a57a7564045961f4c503a17019c~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  继续比较元素 15 和 12，15 比 12 小，交换两者位置。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dddb0452d9874daa84a25a01bc476369~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  接着比较元素 15 和 18，15 比 18 小，不交换位置。<br>\n  然后比较元素 18 和 23，18 比 23 小，不交换位置。<br>\n  最后比较元素 23 和 29，23 比 29 小，不交换位置。<br>\n  第三轮结束后状态如下：</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3be716893da24c82b1d141e8cb81eca5~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  以此类推，第四轮结束后的结果为：</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b2f72f6311eb4899be2ff4582be333de~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  第五轮结束后的结果：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/876689531a0749e49b30aacda25ec5b9~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  第六轮结束后的结果：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/12699850ca074397ae3b24aeb30242c7~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  第七轮结束后的结果：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5191401f127a48c5901b9c1bbf6a303c~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  第八轮结束后的结果：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/655944a421644605b050d5324f7c3cc0~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  第九轮结束后的结果：</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6570635800b344efb63297ab93c16342~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<h2 id=\"鸡尾酒排序实现\"><a class=\"markdownIt-Anchor\" href=\"#鸡尾酒排序实现\">#</a> 鸡尾酒排序实现</h2>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/914b497e5f3f448a9818c41c76b068fa~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e45a65b849cf49c3942cc93ca78d4dfb~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  冒泡排序灯塔顶层第一关：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var cocktailSort &#x3D; function (arr) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 来去为一回合，共循环数组长度的一半</span><br><span class=\"line\">    &#x2F;&#x2F; console.log(arr.length)</span><br><span class=\"line\">    var temp &#x2F;&#x2F; 交换时暂存变量</span><br><span class=\"line\">    console.time(&#39;鸡尾酒排序耗时&#39;)</span><br><span class=\"line\">    for (var i &#x3D; 0; i &lt; arr.length &#x2F; 2; i++) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 从左向右依次比较并进行交换</span><br><span class=\"line\">        for (var j &#x3D; 0; j &lt; arr.length - 1 - i; j++) &#123;</span><br><span class=\"line\">            if (arr[j] &gt; arr[j+1]) &#123;</span><br><span class=\"line\">                &#x2F;&#x2F; 进行交换</span><br><span class=\"line\">                temp &#x3D; arr[j] </span><br><span class=\"line\">                arr[j] &#x3D; arr[j+1]</span><br><span class=\"line\">                arr[j+1] &#x3D; temp</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        console.log(i, arr)</span><br><span class=\"line\">        &#x2F;&#x2F; 从右向左依次比较进行交换</span><br><span class=\"line\">        for (var k &#x3D; arr.length - 1 - i; k &gt; i; k--)&#123;</span><br><span class=\"line\">            if (arr[k] &lt; arr[k-1]) &#123;</span><br><span class=\"line\">                temp &#x3D; arr[k]</span><br><span class=\"line\">                arr[k] &#x3D; arr[k-1]</span><br><span class=\"line\">                arr[k-1] &#x3D; temp</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        console.log(i, arr)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.timeEnd(&#39;鸡尾酒排序耗时&#39;)</span><br><span class=\"line\">    return arr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var arr &#x3D; [15, 9, 18, 6, 12, 23, 2, 32, 29]</span><br><span class=\"line\">console.log(cocktailSort(arr))</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b1da05d14deb4fd8aafc817faf7a5728~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bcd73118967a4d038b5d5de3e355e9c5~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0c34a44e2ae44af2bc965a22d8828566~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  冒泡排序灯塔顶层第二关：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var cocktailRanking &#x3D; function (arr) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 来去为一回合，共循环数组长度的一半</span><br><span class=\"line\">    &#x2F;&#x2F; console.log(arr.length)</span><br><span class=\"line\">    var temp &#x2F;&#x2F; 交换时暂存变量</span><br><span class=\"line\">    var isSorted &#x2F;&#x2F; 标记是否进行交换</span><br><span class=\"line\">    console.time(&#39;鸡尾酒排序耗时&#39;)</span><br><span class=\"line\">    for (var i &#x3D; 0; i &lt; arr.length &#x2F; 2; i++) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 从左向右依次比较并进行交换</span><br><span class=\"line\">        isSorted &#x3D; true</span><br><span class=\"line\">        for (var j &#x3D; 0; j &lt; arr.length - 1 - i; j++) &#123;</span><br><span class=\"line\">            if (arr[j] &gt; arr[j+1]) &#123;</span><br><span class=\"line\">                &#x2F;&#x2F; 进行交换</span><br><span class=\"line\">                temp &#x3D; arr[j] </span><br><span class=\"line\">                arr[j] &#x3D; arr[j+1]</span><br><span class=\"line\">                arr[j+1] &#x3D; temp</span><br><span class=\"line\">                isSorted &#x3D; false</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        console.log(i,arr)</span><br><span class=\"line\">        if (isSorted) break</span><br><span class=\"line\">        &#x2F;&#x2F; 标记未进行交换</span><br><span class=\"line\">        isSorted &#x3D; true</span><br><span class=\"line\">        &#x2F;&#x2F; 从右向左依次比较进行交换</span><br><span class=\"line\">        for (var k &#x3D; arr.length - 1 - i; k &gt; i; k--)&#123;</span><br><span class=\"line\">            if (arr[k] &lt; arr[k-1]) &#123;</span><br><span class=\"line\">                temp &#x3D; arr[k]</span><br><span class=\"line\">                arr[k] &#x3D; arr[k-1]</span><br><span class=\"line\">                arr[k-1] &#x3D; temp</span><br><span class=\"line\">                isSorted &#x3D; false</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        console.log(i,arr)</span><br><span class=\"line\">        if (isSorted) break</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.timeEnd(&#39;鸡尾酒排序耗时&#39;)</span><br><span class=\"line\">    return arr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var arr &#x3D; [15, 9, 18, 6, 12, 23, 2, 32, 29]</span><br><span class=\"line\">console.log(cocktailRanking(arr))</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6e3237fc3a31421aa71ecc3042864968~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  冒泡排序灯塔顶层终极：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var cocktailSort &#x3D; function (arr) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 来去为一回合，共循环数组长度的一半</span><br><span class=\"line\">    &#x2F;&#x2F; console.log(arr.length)</span><br><span class=\"line\">    var temp &#x2F;&#x2F; 交换时暂存变量</span><br><span class=\"line\">    var leftBorder &#x3D; 0, rightBorder &#x3D; arr.length - 1 &#x2F;&#x2F; 设置左右边界值</span><br><span class=\"line\">    var leftSortIndex, rightSortIndex &#x2F;&#x2F;设置左边最后一组交换位置的下标，右边最后一组交换位置的下标</span><br><span class=\"line\">    var isSorted &#x2F;&#x2F; 标记是否进行交换</span><br><span class=\"line\">    console.time(&#39;鸡尾酒排序耗时&#39;)</span><br><span class=\"line\">    for (var i &#x3D; 0; i &lt; arr.length &#x2F; 2; i++) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 从左向右依次比较并进行交换</span><br><span class=\"line\">        isSorted &#x3D; true</span><br><span class=\"line\">        for (var j &#x3D; leftBorder; j &lt; rightBorder; j++) &#123;</span><br><span class=\"line\">            if (arr[j] &gt; arr[j+1]) &#123;</span><br><span class=\"line\">                &#x2F;&#x2F; 进行交换</span><br><span class=\"line\">                temp &#x3D; arr[j] </span><br><span class=\"line\">                arr[j] &#x3D; arr[j+1]</span><br><span class=\"line\">                arr[j+1] &#x3D; temp</span><br><span class=\"line\">                isSorted &#x3D; false</span><br><span class=\"line\">                rightSortIndex &#x3D; j</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        rightBorder &#x3D; rightSortIndex</span><br><span class=\"line\">        console.log(i,arr)</span><br><span class=\"line\">        if (isSorted) break</span><br><span class=\"line\">        &#x2F;&#x2F; 标记未进行交换</span><br><span class=\"line\">        isSorted &#x3D; true</span><br><span class=\"line\">        &#x2F;&#x2F; 从右向左依次比较进行交换</span><br><span class=\"line\">        for (var k &#x3D; rightBorder; k &gt; leftBorder; k--)&#123;</span><br><span class=\"line\">            if (arr[k] &lt; arr[k-1]) &#123;</span><br><span class=\"line\">                temp &#x3D; arr[k]</span><br><span class=\"line\">                arr[k] &#x3D; arr[k-1]</span><br><span class=\"line\">                arr[k-1] &#x3D; temp</span><br><span class=\"line\">                isSorted &#x3D; false</span><br><span class=\"line\">                leftSortIndex &#x3D; k</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        leftBorder &#x3D; leftSortIndex</span><br><span class=\"line\">        console.log(i,arr)</span><br><span class=\"line\">        if (isSorted) break</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.timeEnd(&#39;鸡尾酒排序耗时&#39;)</span><br><span class=\"line\">    return arr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var arr &#x3D; [15, 9, 18, 6, 12, 23, 2, 32, 29]</span><br><span class=\"line\">console.log(cocktailSort(arr))</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/80081457d1634e47bfe8e45aa093b9ae~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d3211d7b94f24be19d1142de4ef75ece~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>  冒泡排序算法就到此为止。<br>\n  其实排序算法博大精深，还有许多排序算法没来及总结，等我整理好后，我一定还会回来的。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/380508881e3642849ec0ea8fd88ec6e0~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<blockquote>\n<p>如果喜欢我的文章请 &quot;点赞&quot; “评论” “关注”，大家的支持就是我坚持下去的动力！若是以上内容有任何错误或者不准确的地方，欢迎留言指出，若你有更好的想法，也欢迎一起交流学习！</p>\n</blockquote>\n",
            "tags": [
                "排序"
            ]
        },
        {
            "id": "https://ttt2021.github.io/posts/e8f85541/",
            "url": "https://ttt2021.github.io/posts/e8f85541/",
            "title": "原型与原型链",
            "date_published": "2021-05-15T06:15:50.000Z",
            "content_html": "<p><img src=\"//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/21784b9fef384458ba78342ddd3312a3~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\"></p>\n<blockquote>\n<p>         在 JavaScript 中，原型和原型链是不可避免的重要概念，那么怎么去理解原型和原型链呢？下面是我对原型和原型链的理解和总结。也许有些理解还比较浅薄，随着时间的推移和理解的深入，以后还会补充。如果大家发现我理解的有问题，欢迎大家在评论中指正。</p>\n</blockquote>\n<h2 id=\"为什么-javascript-设计为基于原型的模式\"><a class=\"markdownIt-Anchor\" href=\"#为什么-javascript-设计为基于原型的模式\">#</a> 为什么 javaScript 设计为基于原型的模式</h2>\n<p>  在以往的学习过程中，我们曾通过学习面向对象语言 java 了解到其有三大特性：封装、继承、多态。关于继承，java 与 javascript 其实两者并不完全一样。</br>  那么 javascript 到底是如何设计出来的呢？早期，浏览器只能浏览网页内容，而不能进行用户交互，也就说当我们输入账号密码进行登录时，浏览器不能对其输入内容进行判断，需要通过服务器进行判断，而网景公司为了解决这一问题，发明一种与 java 搭配使用的辅助脚本语言，并在语法上有些类似。由此可以看出，javascript 受到 java 的影响，其都是对象类型，有对象则就会涉及到继承机制，那么 JS 的继承机制是怎么样呢？</br>  JS 参考 java 的设计，使用 new 操作符生成对象，但其与 java 不同的是 new 后面跟的是 Construtor 而不是 Class 。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; java 中生成一个对象</span><br><span class=\"line\">Person p &#x3D; new Person() &#x2F;&#x2F; Person 指的是类名</span><br><span class=\"line\">&#x2F;&#x2F; js 生成一个对象</span><br><span class=\"line\">function Person (age) &#123;</span><br><span class=\"line\">    this.age &#x3D; age</span><br><span class=\"line\">    this.nation &#x3D; &#39;China&#39;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var father &#x3D; new Person(42) &#x2F;&#x2F; Person 指的是构造函数</span><br><span class=\"line\">var mingming &#x3D; new Person(11)</span><br></pre></td></tr></table></figure>\n<h2 id=\"构造函数-constructor\"><a class=\"markdownIt-Anchor\" href=\"#构造函数-constructor\">#</a> 构造函数 Constructor</h2>\n<p>        构造函数也是普通函数，其也有 prototype 属性，与普通函数的区别是其要求首字母大写。若构造函数使用 new 操作符调用时，其需要执行四个步骤：</br>  1. 创建一个新的对象</br>  2. 将 this 指向这个新的对象</br>  3. 执行构造函数，给新对象添加属性和方法</br>  4. 返回这个新对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Food (name) &#123;</span><br><span class=\"line\">    this.name &#x3D; name</span><br><span class=\"line\">    this.eat &#x3D; function () &#123;</span><br><span class=\"line\">        console.log(&#39;eat&#39;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var food &#x3D; new Food(&#39;banana&#39;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"原型-prototype\"><a class=\"markdownIt-Anchor\" href=\"#原型-prototype\">#</a> 原型 prototype</h2>\n<p>  任何一个函数都有一个 prototype 属性，它指向 prototype 对象。那么原型其实就是一个对象，在原型上定义的属性，通过继承（new 操作符实现），实例化的对象也拥有了该属性。</br>  原型与构造函数的关系：构造函数内有一个 prototype 属性，通过该属性可以访问到原型。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/38dae607b889448282019a8edfe135b5~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>        以构造函数中的代码为例，Food 就是构造函数，Food.prototype 就是原型，food 就是参照 Food.prototype 生成的一个对象。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f867b69c971e4076b3eb2437fca50d00~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<h2 id=\"实例-instance\"><a class=\"markdownIt-Anchor\" href=\"#实例-instance\">#</a> 实例 instance</h2>\n<p>         实例就是通过构造函数创建出来的对象，在使用 new 操作符时，将构造函数的原型对象赋值给实例的 proto 属性。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7390d10af98749e284510e5c4f4b9665~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>         简单来说，我们使用 new 操作符创建一个 food 实例，并且可以通过 instanceof 检验实例与构造函数之间的关系。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Food (name) &#123;</span><br><span class=\"line\">    this.name &#x3D; name</span><br><span class=\"line\">    this.eat &#x3D; function () &#123;</span><br><span class=\"line\">        console.log(&#39;eat&#39;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var food &#x3D; new Food(&#39;banana&#39;)  &#x2F;&#x2F; 实例化</span><br><span class=\"line\">var res &#x3D; food instanceof Food &#x2F;&#x2F; 检查 food 是否为 Food 实例</span><br><span class=\"line\">console.log(res) &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>\n<p>         当我们在原型上定义一个属性时，该属性也会赋值给实例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Food (name) &#123;</span><br><span class=\"line\">    this.name &#x3D; name</span><br><span class=\"line\">    this.eat &#x3D; function () &#123;</span><br><span class=\"line\">        console.log(&#39;eat&#39;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var food &#x3D; new Food(&#39;banana&#39;)  &#x2F;&#x2F; 实例化</span><br><span class=\"line\">var res &#x3D; food instanceof Food &#x2F;&#x2F; 检查 food 是否为 Food 实例</span><br><span class=\"line\">console.log(res) &#x2F;&#x2F; true</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 原型定义属性</span><br><span class=\"line\">Food.prototype.type &#x3D; &#39;object named Food&#39;</span><br><span class=\"line\">var foodRes &#x3D; food.type &#x2F;&#x2F; 实例继承的属性</span><br><span class=\"line\">console.log(foodRes) &#x2F;&#x2F; object named Food</span><br></pre></td></tr></table></figure>\n<h2 id=\"隐式原型-proto\"><a class=\"markdownIt-Anchor\" href=\"#隐式原型-proto\">#</a> 隐式原型 <strong><strong>proto</strong></strong></h2>\n<p>        任何对象在创建时都会有一个 <strong><strong>proto</strong></strong> 属性，它指向产生当前对象的构造函数的原型对象。由于该属性并非标准规定的属性，所以不要随便去更改该属性的值，以免破坏原型链。也就是说，实例可以通过 <strong><strong>proto</strong></strong> 属性访问到原型。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bf2b5915f98a402d9f7ab5687a1ce3dc~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>        对象中的 <strong><strong>proto</strong></strong> 属性在所有实现中是无法访问到的，但是可以通过 isPrototypeOf () 方法来确定对象之间是否存在着这种关系。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Food (name) &#123;</span><br><span class=\"line\">    this.name &#x3D; name</span><br><span class=\"line\">    this.eat &#x3D; function () &#123;</span><br><span class=\"line\">        console.log(&#39;eat&#39;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var food &#x3D; new Food(&#39;banana&#39;)  &#x2F;&#x2F; 实例化</span><br><span class=\"line\">console.log(food.__proto__ &#x3D;&#x3D;&#x3D; Food.prototype) &#x2F;&#x2F; true</span><br><span class=\"line\">console.log(Food.prototype.isPrototypeOf(food)) &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>\n<h2 id=\"构造函数-constructor-2\"><a class=\"markdownIt-Anchor\" href=\"#构造函数-constructor-2\">#</a> 构造函数 constructor</h2>\n<p>        构造函数可以通过 prototype 属性访问到原型，那么原型也是能够通过某种途径访问到构造函数的，其就是原型中的一个属性 constructor ，该属性并不是真正的构造函数，真正的构造函数是指 Constructor，两者不要混淆了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Food (name) &#123;</span><br><span class=\"line\">    this.name &#x3D; name</span><br><span class=\"line\">    this.eat &#x3D; function () &#123;</span><br><span class=\"line\">        console.log(&#39;eat&#39;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var food &#x3D; new Food(&#39;banana&#39;)</span><br><span class=\"line\">console.log(Food.prototype.constructor &#x3D;&#x3D;&#x3D; Food) &#x2F;&#x2F;true</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/446ece5821ab449a828e66a3b514f2cc~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>        <strong>关键：prototype 的 constructor 指向构造函数本身</strong></p>\n<p>        那么构造函数、原型、实例三者的关系应该是这样的：</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ad9454aeb72a4f8985786bbb30bf24f7~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<p>   为了更好地理解这一过程，我通过一个故事给大家梳理一下：</br>  1. 很久以前，有个雕刻家偶然看到一个很精致的花瓶（原型 Food.prototype)</br>  2. 一天，他想通过大批生产复刻这个花瓶来发家致富，于是他先分析这个花瓶，还原了雕刻的过程，并设计出了一条生产线（构造器 Food）  </br>  3. 然后通过这条生产线，雕刻出许许多多的复刻花瓶。（实例 food）</p>\n<h2 id=\"原型链\"><a class=\"markdownIt-Anchor\" href=\"#原型链\">#</a> 原型链</h2>\n<p>        proto 是任何对象都有的属性，在 js 中会形成一条 proto 连接起来的链条，递归访问 proto 直到值为 null ，这个搜索过程形成的链状关系就是原型链。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Food (name) &#123;</span><br><span class=\"line\">    this.name &#x3D; name</span><br><span class=\"line\">    this.eat &#x3D; function () &#123;</span><br><span class=\"line\">        console.log(&#39;eat&#39;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var food &#x3D; new Food(&#39;banana&#39;)  &#x2F;&#x2F; 实例化</span><br><span class=\"line\">&#x2F;&#x2F; 原型链</span><br><span class=\"line\">console.log(food.__proto__) &#x2F;&#x2F; Food &#123;&#125;</span><br><span class=\"line\">console.log(food.__proto__.__proto__) &#x2F;&#x2F; &#123;&#125;</span><br><span class=\"line\">console.log(food.__proto__.__proto__.__proto__) &#x2F;&#x2F; null</span><br></pre></td></tr></table></figure>\n<p>        如下图：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a0f18a4cae1f4a58a532f3e1b233c491~tplv-k3u1fbpfcp-watermark.image\" alt=\"\"></p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>        1. 每创建一个函数都会有一个 prototype 属性，该属性是一个指针，指向一个对象，该对象为原型对象 (Food.prototype)。</br>  2. 原型对象上的默认属性 constructor 也是一个指针，指向其相关的构造函数。</br>  3. 通过 new 操作符产生的实例对象都会有一个内部属性指向原型对象，该实例对象可以访问原型对象上的所有属性和方法。</br>  4. 实例可以通过内部指针访问到原型对象，原型对象也可以通过 constructor 找到构造函数。</br>  5. 每个构造函数都有一个原型对象，原型对象上包含一个指向构造函数的指针，实例包含一个指向原型对象的内部指针。</br>  6. <strong><strong>proto</strong></strong>_ 的指向取决于对象创建时的实现方式。</br>  7. 构造函数实例，封装的函数，如果通过 new 操作符来调用则是构造函数，否则则不是。</br>  8. 在整个原型链上寻找某个属性，对性能有影响，越是上层的原型对象，对性能的影响越大。</br>  9. js 中一切皆对象，通过 new Function 的是函数对象，其构造函数是 Function，而普通对象的构造函数则是 Object 。</br>  10. 每一个对象都有 <strong><strong>proto</strong></strong> 属性，而每一个函数对象才有 prototype 属性。</p>\n<h4 id=\"参考来源\"><a class=\"markdownIt-Anchor\" href=\"#参考来源\">#</a> 参考来源</h4>\n<hr>\n<p>《JavaScript 高级程序设计》</p>\n<h4 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h4>\n<blockquote>\n<p>        如果你仔细阅读完本文，相信你对 JavaScript 中的原型和原型链会有新的认识。如果你觉得对你有帮助，记得 <strong>点赞</strong> 哦！如果你发现我理解的有问题，也欢迎你在评论中指正出来。</p>\n</blockquote>\n",
            "tags": [
                "javascript"
            ]
        }
    ]
}